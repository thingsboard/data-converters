{
  "name": "ChirpStack Uplink Converter for Milesight VS373",
  "type": "UPLINK",
  "integrationType": "CHIRPSTACK",
  "debugMode": false,
  "debugSettings": {
    "failuresEnabled": true,
    "allEnabled": false,
    "allEnabledUntil": 0
  },
  "configuration": {
    "scriptLang": "TBEL",
    "decoder": null,
    "tbelDecoder": "/**\n * Decodes the incoming payload and returns a structured object containing telemetry data and attributes.\n *\n * @param {byte[]} input - The raw payload received as an array of bytes.\n * @returns {Object} output - The structured output with decoded telemetry and attributes.\n */\n\nfunction decodePayload(input) {\n    // Initialize the output object with empty attributes and telemetry for clarity.\n    var result = { attributes: {}, telemetry: {}};\n\n\n    // Extract the timestamp from metadata (represented in milliseconds).\n    var timestamp = metadata.ts; // ts is the timestamp parsed from the incoming message's time, or returns the current time if it cannot be parsed.\n\n    // Initialize an object to store decoded key/value telemetry data.\n    var values = {};\n    var historyDataList = [];\n    for (var i = 0; i < input.length; ) {\n        var channel_id = input[i++] & 0xff;\n        var channel_type = input[i++] & 0xff;\n\n        // IPSO VERSION\n        if (channel_id === 0xff && channel_type === 0x01) {\n            values.ipso_version = readProtocolVersion(input[i]);\n            i += 1;\n        }\n        // HARDWARE VERSION\n        else if (channel_id === 0xff && channel_type === 0x09) {\n            values.hardware_version = readHardwareVersion(java.util.Arrays.copyOfRange(input, i, i + 2));\n            i += 2;\n        }\n        // FIRMWARE VERSION\n        else if (channel_id === 0xff && channel_type === 0x0a) {\n            values.firmware_version = readFirmwareVersion(java.util.Arrays.copyOfRange(input, i, i + 2));\n            i += 2;\n        }\n        // TSL VERSION\n        else if (channel_id === 0xff && channel_type === 0xff) {\n            values.tsl_version = readTslVersion(java.util.Arrays.copyOfRange(input, i, i + 2));\n            i += 2;\n        }\n        // SERIAL NUMBER\n        else if (channel_id === 0xff && channel_type === 0x16) {\n            values.sn = readSerialNumber(java.util.Arrays.copyOfRange(input, i, i + 8));\n            i += 8;\n        }\n        // LORAWAN CLASS TYPE\n        else if (channel_id === 0xff && channel_type === 0x0f) {\n            values.lorawan_class = readLoRaWANClass(input[i]);\n            i += 1;\n        }\n        // DEVICE STATUS\n        else if (channel_id === 0xff && channel_type === 0x0b) {\n            values.device_status = readDeviceStatus(1);\n            i += 1;\n        }\n        // DETECTION TARGET\n        else if (channel_id === 0x03 && channel_type === 0xf8) {\n            values.detection_status = readDetectionStatus(input[i]);\n            values.target_status = readTargetStatus(input[i + 1]);\n            values.use_time_now = parseBytesToInt(input, i + 2, 2);\n            values.use_time_today = parseBytesToInt(input, i + 4, 2);\n            i += 6;\n        }\n        // REGION OCCUPANCY\n        else if (channel_id === 0x04 && channel_type === 0xf9) {\n            values.region_1_occupancy = readRegionStatus(input[i]);\n            values.region_2_occupancy = readRegionStatus(input[i + 1]);\n            values.region_3_occupancy = readRegionStatus(input[i + 2]);\n            values.region_4_occupancy = readRegionStatus(input[i + 3]);\n            i += 4;\n        }\n        // OUT OF BED\n        else if (channel_id === 0x05 && channel_type === 0xfa) {\n            values.region_1_out_of_bed_time = parseBytesToInt(input, i, 2);\n            values.region_2_out_of_bed_time = parseBytesToInt(input, i + 2, 2);\n            values.region_3_out_of_bed_time = parseBytesToInt(input, i + 4, 2);\n            values.region_4_out_of_bed_time = parseBytesToInt(input, i + 6, 2);\n            i += 8;\n        }\n         // ALARM\n        else if (channel_id === 0x06 && channel_type === 0xfb) {\n            var event = {};\n            event.alarm_id = parseBytesToInt(input, i, 2);\n            event.alarm_type = readAlarmType(input[i + 2]);\n            event.alarm_status = readAlarmStatus(input[i + 3]);\n            // EVENT TYPE: OUT OF BED\n            var event_type = input[i + 2];\n            if (event_type === 3) {\n                event.region_id = input[i + 4];\n            }\n            i += 5;\n\n            decoded.events = decoded.events != null ? decoded.events : [];\n            decoded.events.push(event);\n        }\n        // HISTORY DATA\n        else if (channel_id === 0x20 && channel_type === 0xce) {\n            var data = {};\n            data.id = parseBytesToInt(input, i, 2);\n            data.alarm_type = readAlarmType(input[i + 2]);\n            data.event_status = readAlarmStatus(input[i + 3]);\n            var event_type = input[i + 2];\n            // EVENT TYPE: OUT OF BED\n            if (event_type === 3) {\n                data.region_id = input[i + 4];\n            }\n            i += 5;\n\n            historyDataList,push(data);\n        }\n        // DOWNLINK RESPONSE\n        else if (channel_id === 0xfe || channel_id === 0xff) {\n            result = handle_downlink_response(channel_type, input, i);\n            values = result.data;\n            i = result.offset;\n        } else if (channel_id === 0xf8 || channel_id === 0xf9) {\n            result = handle_downlink_response_ext(channel_id, channel_type, input, i);\n            values = result.data;\n            i = result.offset;\n        } else {\n            break;\n        }\n    }\n\n    // Combine the timestamp with values and add it to the telemetry.\n    result.telemetry = {\n        ts: timestamp,\n        values: values\n    };\n\n    // Return the fully constructed output object.\n    return result;\n}\n\nvar result = decodePayload(payload);\n\n// Return the final result object.\nreturn result;\n\nfunction hasResultFlag(code) {\n    return code === 0xf8;\n}\n\nfunction readResultStatus(status) {\n    switch (status) {\n        case 0:\n            return \"success\";\n        case 1:\n            return \"forbidden\";\n        case 2:\n            return \"invalid parameter\";\n        default:\n            return undefined;\n    }\n}\n\nfunction readProtocolVersion(bytes) {\n    var major = (bytes & 0xf0) >> 4;\n    var minor = bytes & 0x0f;\n    return \"v\" + major + \".\" + minor;\n}\n\nfunction readHardwareVersion(bytes) {\n    var major = bytes[0] & 0xff;\n    var minor = (bytes[1] & 0xff) >> 4;\n    return \"v\" + major + \".\" + minor;\n}\n\nfunction readFirmwareVersion(bytes) {\n    var major = bytes[0] & 0xff;\n    var minor = bytes[1] & 0xff;\n    return \"v\" + major + \".\" + minor;\n}\n\nfunction readTslVersion(bytes) {\n    var major = bytes[0] & 0xff;\n    var minor = bytes[1] & 0xff;\n    return \"v\" + major + \".\" + minor;\n}\n\nfunction readSerialNumber(bytes) {\n    var result = \"\";\n    for (var i = 0; i < bytes.length; i++) {\n        result += String.format(\"%02x\", bytes[i] & 0xFF);\n    }\n    return result;\n}\n\nfunction readLoRaWANClass(type) {\n    switch (type) {\n        case 0:\n            return \"Class A\";\n        case 1:\n            return \"Class B\";\n        case 2:\n            return \"Class C\";\n        case 3:\n            return \"Class CtoB\";\n        default:\n            return null;\n    }\n}\n\nfunction readDeviceStatus(status) {\n    switch (status) {\n        case 0:\n            return \"off\";\n        case 1:\n            return \"on\";\n        default:\n            return null;\n    }\n}\n\nfunction readDetectionStatus(status) {\n    switch (status) {\n        case 0:\n            return \"normal\";\n        case 1:\n            return \"vacant\";\n        case 2:\n            return \"in_bed\";\n        case 3:\n            return \"out_of_bed\";\n        case 4:\n            return \"fall\";\n        default:\n            return null;\n    }\n}\n\nfunction readTargetStatus(status) {\n    switch (status) {\n        case 0:\n            return \"normal\";\n        case 1:\n            return \"motionless\";\n        case 2:\n            return \"abnormal\";\n        default:\n            return null;\n    }\n}\n\nfunction readRegionStatus(status) {\n    switch (status) {\n        case 0:\n            return \"occupied\";\n        case 1:\n            return \"vacant\";\n        default:\n            return null;\n    }\n}\n\nfunction readAlarmType(type) {\n    switch (type) {\n        case 0:\n            return \"fall\";\n        case 1:\n            return \"motionless\";\n        case 2:\n            return \"dwell\";\n        case 3:\n            return \"out_of_bed\";\n        case 4:\n            return \"occupied\";\n        case 5:\n            return \"vacant\";\n        default:\n            return null;\n    }\n}\n\nfunction readAlarmStatus(status) {\n    switch (status) {\n        case 1:\n            return \"alarm_triggered\";\n        case 2:\n            return \"alarm_deactivated\";\n        case 3:\n            return \"alarm_ignored\";\n        default:\n            return null;\n    }\n}\n\nfunction readEnableStatus(status) {\n    switch (status) {\n        case 0:\n            return \"disable\";\n        case 1:\n            return \"enable\";\n        default:\n            return null;\n    }\n}\n\n\nfunction readYesNoStatus(status) {\n    switch (status) {\n        case 0:\n            return \"no\";\n        case 1:\n            return \"yes\";\n        default:\n            return null;\n    }\n}\n\nfunction readDigitalOutput(status) {\n    switch (status) {\n        case 0:\n            return \"low\";\n        case 1:\n            return \"high\";\n        default:\n            return null;\n    }\n}\n\nfunction readDetectionRegion(bytes) {\n    var detection_region = {};\n    detection_region.x_min = parseBytesToInt(bytes, 0, 2);\n    detection_region.x_max = parseBytesToInt(bytes, 2, 2);\n    detection_region.y_min = parseBytesToInt(bytes, 4, 2);\n    detection_region.y_max = parseBytesToInt(bytes, 6, 2);\n    detection_region.z_max = parseBytesToInt(bytes, 8, 2);\n    detection_region.install_height = parseBytesToInt(bytes, 10, 2);\n    return detection_region;\n}\n\nfunction readDetectionSettings(bytes) {\n    var detection_settings = {};\n    detection_settings.mode = readDetectionMode(bytes[0]);\n    detection_settings.sensitivity = readDetectionSensitivity(bytes[1]);\n    return detection_settings;\n}\n\nfunction readDetectionMode(type) {\n    switch (type) {\n        case 0:\n            return \"default\";\n        case 1:\n            return \"bedroom\";\n        case 2:\n            return \"bathroom\";\n        case 3:\n            return \"public\";\n        default:\n            return null;\n    }\n}\n\nfunction readDetectionSensitivity(type) {\n    switch (type) {\n        case 0:\n            return \"low\";\n        case 1:\n            return \"high\";\n        default:\n            return null;\n    }\n}\n\nfunction readFallDetectionSettings(bytes) {\n    var fall_detection_settings = {};\n    fall_detection_settings.confirm_time = parseBytesToInt(bytes, 0, 2);\n    fall_detection_settings.delay_report_time = parseBytesToInt(bytes, 2, 2);\n    fall_detection_settings.alarm_duration = parseBytesToInt(bytes, 4, 2);\n    return fall_detection_settings;\n}\n\nfunction readDwellDetectionSettings(bytes) {\n    var dwell_detection_settings = {};\n    dwell_detection_settings.enable = readEnableStatus(bytes[0]);\n    dwell_detection_settings.dwell_time = parseBytesToInt(bytes, 1, 2);\n    return dwell_detection_settings;\n}\n\nfunction readMotionDetectionSettings(bytes) {\n    var motion_detection_settings = {};\n    motion_detection_settings.enable = readEnableStatus(bytes[0]);\n    motion_detection_settings.motionless_time = parseBytesToInt(bytes, 1, 2);\n    return motion_detection_settings;\n}\n\nfunction readRadarSettings(bytes) {\n    var radar_settings = {};\n    radar_settings.mode = readRadarMode(bytes[0]);\n    radar_settings.frame_rate = bytes[1];\n    return radar_settings;\n}\n\nfunction readRadarMode(type) {\n    switch (type) {\n        case 0:\n            return \"const\";\n        case 1:\n            return \"free\";\n        default:\n            return null;\n    }\n}\n\nfunction readExistenceDetectionSettings(bytes) {\n    var existence_detection_settings = {};\n    existence_detection_settings.exist_confirm_time = bytes[0];\n    existence_detection_settings.leaved_confirm_time = bytes[1];\n    return existence_detection_settings;\n}\n\nfunction readRegionSettings(bytes) {\n    var region_settings = {};\n    region_settings.region_id = bytes[0] + 1;\n    region_settings.x_min = parseBytesToInt(bytes, 1, 2);\n    region_settings.x_max = parseBytesToInt(bytes, 3, 2);\n    region_settings.y_min = parseBytesToInt(bytes, 5, 2);\n    region_settings.y_max = parseBytesToInt(bytes, 7, 2);\n    return region_settings;\n}\n\n\nfunction readRegionDetectionSettings(bytes) {\n    var region_detection_settings = {};\n    region_detection_settings.region_id = bytes[0] + 1;\n    region_detection_settings.fall_detection_enable = readEnableStatus(bytes[1]);\n    region_detection_settings.dwell_detection_enable = readEnableStatus(bytes[2]);\n    region_detection_settings.motion_detection_enable = readEnableStatus(bytes[3]);\n    region_detection_settings.region_type = readRegionType(bytes[4]);\n    return region_detection_settings;\n}\n\nfunction readRegionType(type) {\n    switch (type) {\n        case 0:\n            return \"default\";\n        case 1:\n            return \"bed\";\n        case 2:\n            return \"door\";\n        default:\n            return null;\n    }\n}\n\nfunction readBedDetectionSettings(bytes) {\n    var bed_detection_settings = {};\n    bed_detection_settings.bed_id = bytes[0] + 1;\n    bed_detection_settings.enable = readEnableStatus(bytes[1]);\n    bed_detection_settings.start_time = parseBytesToInt(bytes, 2, 2); \n    bed_detection_settings.end_time = parseBytesToInt(bytes, 4, 2); \n    bed_detection_settings.bed_height = parseBytesToInt(bytes, 6, 2); \n    bed_detection_settings.out_of_bed_time = parseBytesToInt(bytes, 8, 2); \n    return bed_detection_settings;\n}\n\nfunction readD2DMasterConfig(bytes) {\n    var offset = 0;\n    var config = {};\n    config.mode = readD2DMode(bytes[offset]);\n    config.enable = readEnableStatus(bytes[offset + 1]);\n    config.lora_uplink_enable = readEnableStatus(bytes[offset + 2]);\n    config.d2d_cmd = readD2DCommand(java.util.Arrays.copyOfRange(bytes, offset + 3, 2));\n    config.time = parseBytesToInt(bytes, offset + 5, 2);\n    config.time_enable = readEnableStatus(bytes[offset + 7]);\n    return config;\n}\n\nfunction readD2DCommand(bytes) {\n     if (bytes == null || bytes.length < 2) {\n        return null; \n    }\n\n    String hex1 = String.format(\"%02x\", bytes[1] & 0xFF);\n    String hex0 = String.format(\"%02x\", bytes[0] & 0xFF);\n\n    return hex1 + hex0;\n}\n\nfunction readD2DMode(type) {\n    switch (type) {\n        case 0:\n            return \"occupied\";\n        case 1:\n            return \"vacant\";\n        case 2:\n            return \"fall\";\n        case 3:\n            return \"out_of_bed\";\n        case 4:\n            return \"motionless\";\n        case 5:\n            return \"dwell\";\n        default:\n            return undefined;\n    }\n}\n\nfunction readD2DSlaveConfig(bytes) {\n    var d2d_slave_config = {};\n    d2d_slave_config.mode = readD2DMode(bytes[0]);\n    d2d_slave_config.d2d_cmd = readD2DCommand(java.util.Arrays(bytes, 1, 2));\n    d2d_slave_config.control_type = readD2DControlType(bytes[3]);\n    d2d_slave_config.action_type = readD2DActionType(bytes[4]);\n    return d2d_slave_config;\n}\n\nfunction readD2DControlType(type) {\n   switch (type) {\n        case 1:\n            return \"button\";\n        default:\n            return null;\n    }\n}\n\nfunction readD2DActionType(type) {\n    switch (type) {\n        case 1:\n            return \"alarm_deactivate\";\n        case 2:\n            return \"wifi_on\";\n        case 3:\n            return \"wifi_off\";\n        default:\n            return null;\n    }\n}\n\nfunction bytesToHexString(bytes) {\n    var result = \"\";\n    for (var i = 0; i < bytes.length; i++) {\n        result += String.format(\"%02x\", bytes[i] & 0xFF);\n    }\n    return result;\n}\n\nfunction handle_downlink_response(channel_type, bytes, offset) {\n    var decoded = {};\n\n    switch (channel_type) {\n        case 0x04:\n            decoded.confirm_mode_enable = readEnableStatus(bytes[offset]);\n            offset += 1;\n            break;\n        case 0x10:\n            decoded.reboot = readYesNoStatus(1);\n            offset += 1;\n            break;\n        case 0x11:\n            decoded.timestamp = parseBytesToInt(bytes, offset, 4);\n            offset += 4;\n            break;\n        case 0x28:\n            decoded.report_status = readYesNoStatus(1);\n            offset += 1;\n            break;\n        case 0x2f:\n            decoded.led_indicator_enable = readEnableStatus(bytes[offset]);\n            offset += 1;\n            break;\n        case 0x35:\n            decoded.d2d_key = bytesToHexString(java.util.Arrays.copyOfRange(bytes, offset, offset + 8));\n            offset += 8;\n            break;\n        case 0x3e:\n            decoded.buzzer_enable = readEnableStatus(bytes[offset]);\n            offset += 1;\n            break;\n        case 0x40:\n            decoded.adr_enable = readEnableStatus(bytes[offset]);\n            offset += 1;\n            break;\n        case 0x42:\n            decoded.wifi_enable = readEnableStatus(bytes[offset]);\n            offset += 1;\n            break;\n        case 0x69:\n            decoded.retransmit_enable = readEnableStatus(bytes[offset]);\n            offset += 1;\n            break;\n        case 0x6a:\n            var interval_type = bytes[offset];\n            switch (interval_type) {\n                case 0:\n                    decoded.retransmit_interval = parseBytesToInt(bytes, offset + 1, 2);\n                    break;\n                case 1:\n                    decoded.resend_interval = parseBytesToInt(bytes, offset + 1, 2);\n                    break;\n                default:\n                    break;\n            }\n            offset += 3;\n            break;\n        case 0x84:\n            decoded.d2d_enable = readEnableStatus(bytes[offset]);\n            offset += 1;\n            break;\n        case 0x8e:\n            // ignore the first byte\n            decoded.report_interval = parseBytesToInt(bytes, offset + 1, 2);\n            offset += 3;\n            break;\n        case 0x96:\n            var config = readD2DMasterConfig(java.util.Arrays.copyOfRange(bytes, offset, offset + 8));\n            offset += 8;\n\n            decoded.d2d_master_config = decoded.d2d_master_config != null ? decoded.d2d_master_config : [];\n            decoded.d2d_master_config.push(config);\n            break;\n        default:\n            break;\n    }\n\n    return { data: decoded, offset: offset };\n}\n\nfunction handle_downlink_response_ext(code, channel_type, bytes, offset) {\n    var decoded = {};\n\n    switch (channel_type) {\n        case 0x48:\n            var region_id = bytes[offset] + 1;\n            var region_name = \"region_\" + region_id;\n            decoded.delete_region = {};\n            decoded.delete_region[region_name] = readYesNoStatus(1);\n            offset += 1;\n            break;\n        case 0x49:\n            var region_settings = readRegionSettings(java.util.Arrays.copyOfRange(bytes, offset, offset + 9));\n            offset += 9;\n            decoded.region_settings = decoded.region_settings != null ? decoded.region_settings : [];\n            decoded.region_settings.push(region_settings);\n            break;\n        case 0x4a:\n            var region_detection_settings = readRegionDetectionSettings(java.util.Arrays.copyOfRange(bytes, offset, offset + 5));\n            offset += 5;\n            decoded.region_detection_settings = decoded.region_detection_settings != null ? decoded.region_detection_settings : [];\n            decoded.region_detection_settings.push(region_detection_settings);\n            break;\n        case 0x4b:\n            var bed_detection_settings = readBedDetectionSettings(java.util.Arrays.copyOfRange(bytes, offset, offset + 9));\n            offset += 9;\n            decoded.bed_detection_settings = decoded.bed_detection_settings != null ? decoded.bed_detection_settings : [];\n            decoded.bed_detection_settings.push(bed_detection_settings);\n            break;\n        case 0x4c:\n            var d2d_slave_config = readD2DSlaveConfig(java.util.Arrays.copyOfRange(bytes, offset, offset + 5));\n            offset += 5;\n            decoded.d2d_slave_config = decoded.d2d_slave_config != null ? decoded.d2d_slave_config : [];\n            decoded.d2d_slave_config.push(d2d_slave_config);\n            break;\n        case 0x4e:\n            decoded.digital_output = readDigitalOutput(bytes[offset]);\n            offset += 1;\n            break;\n        case 0x4d:\n            decoded.wifi_ssid_hidden = readEnableStatus(bytes[offset]);\n            offset += 1;\n            break;\n        case 0x4f:\n            decoded.detection_region_settings = readDetectionRegion(java.util.Arrays.copyOfRange(bytes, offset, offset + 12));\n            offset += 12;\n            break;\n        case 0x50:\n            decoded.detection_settings = readDetectionSettings(java.util.Arrays.copyOfRange(bytes, offset, offset + 2));\n            offset += 2;\n            break;\n        case 0x51:\n            decoded.fall_detection_settings = readFallDetectionSettings(java.util.Arrays.copyOfRange(bytes, offset, offset + 6));\n            offset += 6;\n            break;\n        case 0x52:\n            decoded.dwell_detection_settings = readDwellDetectionSettings(java.util.Arrays.copyOfRange(bytes, offset, offset + 3));\n            offset += 3;\n            break;\n        case 0x53:\n            decoded.motion_detection_settings = readMotionDetectionSettings(java.util.Arrays.copyOfRange(bytes, offset, offset + 3));\n            offset += 3;\n            break;\n        case 0x54:\n            decoded.radar_settings = readRadarSettings(java.util.Arrays.copyOfRange(bytes, offset, offset + 2));\n            offset += 2;\n            break;\n        case 0x56:\n            decoded.existence_detection_settings = readExistenceDetectionSettings(java.util.Arrays.copyOfRange(bytes, offset, offset + 2));\n            offset += 2;\n            break;\n        case 0x64:\n            decoded.release_alarm = readYesNoStatus(bytes[offset]);\n            offset += 1;\n            break;\n\n        default:\n            break;\n    }\n\n    if (hasResultFlag(code)) {\n        var result_value = bytes[offset];\n        offset += 1;\n\n        if (result_value != 0) {\n            var request = decoded;\n            decoded = {};\n            decoded.device_response_result = {};\n            decoded.device_response_result.channel_type = channel_type;\n            decoded.device_response_result.result = readResultStatus(result_value);\n            decoded.device_response_result.request = request;\n        }\n    }\n\n    return { data: decoded, offset: offset };\n}",
    "encoder": null,
    "tbelEncoder": null,
    "updateOnlyKeys": [
      "eui",
      "devAddr",
      "fPort",
      "tenantId",
      "tenantName",
      "applicationId",
      "applicationName",
      "adr",
      "dr",
      "frequency",
      "bandwidth",
      "spreadingFactor",
      "codeRate",
      "deviceProfileId",
      "deviceProfileName"
    ],
    "type": "DEVICE",
    "name": "Device $eui",
    "profile": "$deviceProfileName",
    "label": "$deviceName",
    "customer": "",
    "group": "",
    "telemetry": null,
    "attributes": [
      "eui",
      "devAddr",
      "fPort",
      "tenantId",
      "tenantName",
      "applicationId",
      "applicationName",
      "adr",
      "dr",
      "frequency",
      "bandwidth",
      "spreadingFactor",
      "codeRate",
      "deviceProfileId",
      "deviceProfileName"
    ]
  },
  "additionalInfo": {
    "description": ""
  },
  "edgeTemplate": false,
  "converterVersion": 2
}