{
    "name": "ChirpStack downlink converter for Milesight WT201",
    "type": "DOWNLINK",
    "debugMode": true,
    "configuration": {
        "scriptLang": "TBEL",
        "decoder": null,
        "tbelDecoder": null,
        "encoder": null,
        "tbelEncoder": "// Encode downlink data from incoming Rule Engine message\n\n// msg - JSON message payload downlink message json\n// msgType - type of message, for ex. 'ATTRIBUTES_UPDATED', 'POST_TELEMETRY_REQUEST', etc.\n// metadata - list of key-value pairs with additional data about the message\n// integrationMetadata - list of key-value pairs with additional data defined in Integration executing this converter\n\n/** Encoder **/\n\n\n// \"G\" Uplink; \"G/GH\" Downlink === \"g\"\n// \"CL&CN\" Downlink === \"cl_cn\"\nvar bitMaskWiringSettingss = [\n    {\"y1\": 0, \"g\": 2, \"ob\": 4, \"w1\": 6},\n    {\"e\": 0, \"cl_cn\": 2, \"pek\": 4, \"w2_aux\": 6},\n    {\"y2_gl\": 0, \"ob_mode\": 2}\n];\n\nvar data = bytesToBase64(milesightDeviceEncode(msg));\n\nfunction milesightDeviceEncode(payload) {\n    var encoded = [];\n    if (payload.reboot != null) {\n        encoded = encoded.concat(reboot(payload.reboot));\n    }\n    if (payload.report_status != null) {\n        encoded = encoded.concat(reportStatus(payload.report_status));\n    }\n    if (payload.report_interval != null) {\n        encoded = encoded.concat(setReportInterval(payload.report_interval));\n    }\n    if (payload.system_on_off != null) {\n        encoded = encoded.concat(systemOnOff(payload.system_on_off));\n    }\n    if (payload.control_permissions != null) {\n        encoded = encoded.concat(setControlPermissions(payload.control_permissions));\n    }\n    if (payload.?child_lock_config.size() > 0) {\n        encoded = encoded.concat(setChildLock(payload.child_lock_config));\n    }\n    if (payload.timezone != null) {\n        encoded = encoded.concat(setTimezone(payload.timezone));\n    }\n    if (payload.?dst_config.size() > 0) {\n        encoded = encoded.concat(setDaylightSavingTime(payload.dst_config));\n    }\n    if (payload.?multicast_group_config.size() > 0) {\n        encoded = encoded.concat(setMulticastGroupConfig(payload.multicast_group_config));\n    }\n    if (payload.?wiring_settings.size() > 0) {\n        encoded = encoded.concat(setWiringSettings(payload.wiring_settings));\n    }\n    if (payload.ob_mode != null) {\n        encoded = encoded.concat(setOBMode(payload.ob_mode));\n    }\n    if (payload.?freeze_protection_config.size() > 0) {\n        encoded = encoded.concat(setFreezeProtection(payload.freeze_protection_config.enable, payload.freeze_protection_config.temperature));\n    }\n    if (payload.?temperature_control.size() > 0) {\n        if (payload.temperature_control.temperature != null) {\n            encoded = encoded.concat(setTemperatureTarget(payload.temperature_control.mode, payload.temperature_control.temperature));\n        } else {\n            encoded = encoded.concat(setTemperatureControlMode(payload.temperature_control.mode));\n        }\n    }\n    if (payload.?temperature_tolerance.size() > 0) {\n        encoded = encoded.concat(setTemperatureTolerance(payload.temperature_tolerance.temperature_error, payload.temperature_tolerance.auto_control_temperature_error));\n    }\n    if (payload.fan_mode != null) {\n        encoded = encoded.concat(setFanMode(payload.fan_mode));\n    }\n    if (payload.?fan_delay.size() > 0) {\n        encoded = encoded.concat(setFanModeWithDelay(payload.fan_delay.enable, payload.fan_delay.fan_delay_time));\n    }\n    if (payload.fan_circulate != null) {\n        encoded = encoded.concat(setFanModeWithCirculate(payload.fan_circulate));\n    }\n    if (payload.?fan_regulate_humidity.size() > 0) {\n        encoded = encoded.concat(setFanRegulateHumidity(payload.fan_regulate_humidity.enable, payload.fan_regulate_humidity.regulate_interval));\n    }\n    if (payload.?humidity_range.size() > 0) {\n        encoded = encoded.concat(setHumidityRange(payload.humidity_range.min, payload.humidity_range.max));\n    }\n    if (payload.?dehumidify.size() > 0) {\n        encoded = encoded.concat(setTemperatureDehumidify(payload.dehumidify.enable, payload.dehumidify.temperature_tolerance));\n    }\n    return encoded;\n}\n\nfunction reboot(reboot) {\n    validateArrayValue(\"Reboot\", reboot, [0, 1]);\n    return reboot === 0 ? [] : [0xff, 0x10, 0xff];\n}\n\nfunction reportStatus(report_status) {\n    validateArrayValue(\"Report status\", report_status, [0, 1]); // 01, the device will return a periodic packet\n    return [0xFF, 0x28, report_status];\n}\n\nfunction setReportInterval(report_interval) {\n    isNumber(\"Reporting Interval\", report_interval);\n    return [0xFF, 0x8E, 0x00, report_interval, report_interval >>> 8];\n}\n\nfunction systemOnOff(system_on_off) {\n    validateArrayValue(\"System On/Off\", system_on_off, [0, 1]);\n    return [0xFF, 0xC5, system_on_off];\n}\n\nfunction setControlPermissions(control_permissions) {\n    validateArrayValue(\"Control Permission\", control_permissions, [0, 1]);\n    return [0xFF, 0xF6, control_permissions];\n}\n\nfunction setChildLock(child_lock_config) {\n    var button_mask_bit_offset = {\n        power_button: 0,\n        up_button: 1,\n        down_button: 2,\n        fan_button: 3,\n        mode_button: 4,\n        reset_button: 5\n    };\n    var arrayChildLock = new int[6];\n    foreach(button\n:\n    child_lock_config.entrySet()\n)\n    {\n        validateArrayValue(\"Child_lock_config.\" + button.key, button.value, [0, 1]);\n        var ind = button_mask_bit_offset[button.key];\n        arrayChildLock[5 - ind] = button.value;\n    }\n    var intChildLock = parseBinaryArrayToInt(arrayChildLock);\n    return [0xFF, 0x25, 0xFF, intChildLock];\n}\n\nfunction setTimezone(timezone) {\n    isNumber(\"UTC Time Zone\", timezone);\n    var tz = valueToInt(timezone, 60);\n    return [0xFF, 0xBD, tz & 0xFF, (tz >>> 8) & 0xFF];\n}\n\nfunction setDaylightSavingTime(dstConfig) {\n    validateArrayValue(\"Dst_config.enable\", dstConfig.enable, [0, 1]);\n    isNumber(\"Dst_config.bias\", dstConfig.bias);\n    if (dstConfig.?start_time.size() > 0 && dstConfig.?end_time.size() > 0) {\n        var rezDstConfig = [0xFF, 0xBA, 0, 0];\n        if (dstConfig.enable === 0) {\n            return rezDstConfig.concat([0, 0, 0, 0, 0, 0, 0, 0]);\n        }\n        rezDstConfig[2] = dstConfig.enable;\n        rezDstConfig[3] = dstConfig.bias;\n        var startDate = validateDstConfigDateTime(dstConfig.start_time.month, dstConfig.start_time.week, dstConfig.start_time.weekday, dstConfig.start_time.time, \"Start\");\n        var endDate = validateDstConfigDateTime(dstConfig.end_time.month, dstConfig.end_time.week, dstConfig.end_time.weekday, dstConfig.end_time.time, \"End\");\n        rezDstConfig = rezDstConfig.concat(startDate);\n        return rezDstConfig.concat(endDate);\n    }\n}\n\nfunction setMulticastGroupConfig(multicast_group_config) {\n    var groupName;\n    var groupValue;\n    var bitArray = new int [8];\n    for (var i = 1; i < 5; i++) {\n        groupName = \"group\" + i + \"_enable\";\n        groupValue = multicast_group_config[groupName];\n        if (groupValue != null) {\n            validateArrayValue(groupName, groupValue, [0, 1]);\n            bitArray[4 - i] = 1;\n            bitArray[8 - i] = groupValue;\n        }\n    }\n    return [0xFF, 0x82, parseBinaryArrayToInt(bitArray)];\n}\n\nfunction setWiringSettings(wiring_settings) {\n    var wiringSets = [0xFF, 0xCA];\n    for (var i = 0; i < 3; i++) {\n        var bitMaskWiringSettings = bitMaskWiringSettingss[i];\n        var wiringSettingValue = 0;\n        foreach(bitMaskWiringSetting\n    :\n        bitMaskWiringSettings.entrySet()\n    )\n        {\n            if (wiring_settings[bitMaskWiringSetting.key] != null) {\n                if (bitMaskWiringSetting.key === \"w2_aux\" || bitMaskWiringSetting.key === \"y2_gl\") {\n                    validateArrayValue(bitMaskWiringSetting.key, wiring_settings[bitMaskWiringSetting.key], [0, 1, 10]);\n                } else if (bitMaskWiringSetting.key === \"ob_mode\") {\n                    validateArrayValue(bitMaskWiringSetting.key, wiring_settings[bitMaskWiringSetting.key], [0, 1, 11]);\n                } else {\n                    validateArrayValue(bitMaskWiringSetting.key, wiring_settings[bitMaskWiringSetting.key], [0, 1]);\n                }\n                wiringSettingValue = wiringSettingValue | wiring_settings[bitMaskWiringSetting.key] << bitMaskWiringSetting.value;\n            }\n        }\n        wiringSets.push(wiringSettingValue);\n    }\n    return wiringSets;\n}\n\nfunction setOBMode(ob_mode) {\n    validateArrayValue(\"Ob_mode\", ob_mode, [0, 1]);\n    return [0xFF, 0xB5, ob_mode];\n}\n\nfunction setFreezeProtection(enable, temperature) {\n    validateArrayValue(\"freeze_protection_config.enable\", enable, [0, 1]);\n    isNumber(\"Freeze Protection temperature\", temperature);\n    var temp = valueToInt(temperature, 10);\n    ;\n    return [0xFF, 0xB0, enable, temp & 0xFF, (temp >>> 8) & 0xFF];\n}\n\nfunction setTemperatureTarget(mode, temperature) {\n    validateArrayValue(\"Temperature Control Mode\", mode, [0, 1, 2, 3]);\n    isNumber(\"Temperature target\", temperature);\n    var temp = valueToInt(temperature, 10);\n    return [0xFF, 0xFA, mode, temp & 0xFF, (temp >>> 8) & 0xFF];\n}\n\nfunction setTemperatureControlMode(mode) {\n    validateArrayValue(\"Temperature Control Mode\", mode, [0, 1, 2, 3]);\n    return [0xFF, 0xFB, mode];\n}\n\nfunction setTemperatureTolerance(temperature_error, auto_control_temperature_error) {\n    isNumber(\"Target temperature tolerance\", temperature_error);\n    isNumber(\"Temperature control tolerance\", auto_control_temperature_error);\n    return [0xFF, 0xB8, valueToInt(temperature_error, 10), valueToInt(auto_control_temperature_error, 10)];\n}\n\nfunction setFanMode(fan_mode) {\n    validateArrayValue(\"Fan Mode\", fan_mode, [0, 1, 2]);\n    return [0xFF, 0xB6, fan_mode];\n}\n\nfunction setFanModeWithDelay(enable, fan_delay_time) {\n    validateArrayValue(\"Fan Delay enable\", enable, [0, 1]);\n    validateIsNumberWithRange(\"Fan  Duration of delay\", fan_delay_time, 5, 55);\n    return [0xF9, 0x05, enable, fan_delay_time];\n}\n\nfunction setFanModeWithCirculate(fan_circulate) {\n    validateIsNumberWithRange(\"Fan Circulate\", fan_circulate, 5, 55);\n    return [0xF9, 0x06, fan_circulate];\n}\n\nfunction setFanRegulateHumidity(enable, regulate_interval) {\n    validateArrayValue(\"Fan Regulate Humidity\", enable, [0, 1]);\n    validateIsNumberWithRange(\"Fan Regulate Humidity\", regulate_interval, 5, 55);\n    return [0xF9, 0x07, enable, regulate_interval];\n}\n\nfunction setHumidityRange(min, max) {\n    validateIsNumberWithRange(\"Humidity Range Min\", min, 0, 100);\n    validateIsNumberWithRange(\"Humidity Range Max\", max, 0, 100);\n    return [0xF9, 0x09, min, max];\n}\n\nfunction setTemperatureDehumidify(enable, temperature_tolerance) {\n    validateArrayValue(\"Temp. Control and Dehumidify  enable\", enable, [0, 1]);\n    isNumber(\"Dehumidify tolerance value\", temperature_tolerance);\n    return [0xF9, 0x0A, enable, valueToInt(temperature_tolerance, 10)];\n}\n\nfunction validateDstConfigDateTime(month, week, weekday, dstTime, startEnd) {\n    var timeSplit = dstTime.split(\":\");\n    var times = [parseInt(timeSplit[0]), parseInt(timeSplit[1])];\n    if (times[0] < 0 || times[0] > 24) {\n        raiseError(startEnd + \" hours [\" + times[0] + \"]. Must be between 0 and 24.\");\n    }\n    if (times[1] < 0 || times[1] > 60) {\n        raiseError(startEnd + \" minutes [\" + times[1] + \"]. Must be between 0 and 60.\");\n    }\n    if (month < 1 || month > 12) {\n        raiseError(startEnd + \" month [\" + month + \"]. Must be between 1 and 12.\");\n    }\n    if (week < 1 || week > 5) {\n        raiseError(startEnd + \" week [\" + week + \"]. Must be between 1 and 5.\");\n    }\n    if (weekday < 1 || weekday > 7) {\n        raiseError(startEnd + \" weekday [\" + weekday + \"]. Must be between 1 and 7.\");\n    }\n    var dayWeek = (week << 4) | weekday;\n    var time = times[0] * 60 + times[1];\n    return [month, dayWeek, time & 0xFF, (time >>> 8) & 0xFF];\n}\n\nfunction validateArrayValue(nameValue, value, enable_values) {\n    if (enable_values.indexOf(value) === -1) {\n        raiseError(nameValue + \" [\" + value + \"]. Must be one of [\" + enable_values.join(\", \"));\n    }\n}\n\nfunction validateIsNumberWithRange(nameValueWithRange, valueWithRange, range_min, range_max) {\n    isNumber(nameValueWithRange, valueWithRange);\n    if (valueWithRange < range_min || valueWithRange > range_max) {\n        raiseError(nameValueWithRange + \" must be in range [\" + range_min + \", \" + range_max + \"]\");\n    }\n}\n\nfunction isNumber(nameValue, value) {\n    if (value === null || isDecimal(value) === -1) {\n        raiseError(nameValue + \" must be a number.\");\n    }\n}\n\nfunction valueToInt(value, factor) {\n    return (value * factor).intValue();\n\n}\n\n\n// Result object with encoded downlink payload\nvar result = {\n\n    // downlink data content type: JSON, TEXT or BINARY (base64 format)\n    contentType: \"TEXT\",\n\n    // downlink data hexadecimal\n    data: base64ToHex(data).toLowerCase(),\n\n    // downlink data (base64 format)\n    // data: data,\n\n    // Optional: To validate a value\n    // dataBas64: data,\n    // dataHex: base64ToHex(data),\n\n    // Optional metadata object presented in key/value format\n    metadata: {\n        DevEUI: metadata.cs_devEui,\n        fPort: metadata.cs_fPort\n    }\n};\n\nreturn result;",
        "updateOnlyKeys": [
            "tenantId",
            "tenantName",
            "applicationId",
            "applicationName",
            "deviceProfileId",
            "deviceProfileName",
            "devEui",
            "devAddr",
            "fPort",
            "frequency",
            "bandwidth",
            "spreadingFactor",
            "codeRate",
            "battery",
            "pir",
            "daylight",
            "confirmed",
            "gatewayId",
            "channel",
            "rfChain",
            "crcStatus"
        ]
    },
    "additionalInfo": {
        "description": ""
    },
    "edgeTemplate": false
}