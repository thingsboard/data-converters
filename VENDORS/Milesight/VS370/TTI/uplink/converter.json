{
  "name": "Things Stack Industries Uplink Converter for Milesight VS370",
  "type": "UPLINK",
  "integrationType": "TTI",
  "debugMode": false,
  "debugSettings": {
    "failuresEnabled": true,
    "allEnabled": false,
    "allEnabledUntil": 0
  },
  "configuration": {
    "scriptLang": "TBEL",
    "decoder": null,
    "tbelDecoder": "/**\n * Decodes the incoming payload and returns a structured object containing telemetry data and attributes.\n *\n * @param {byte[]} input - The raw payload received as an array of bytes.\n * @returns {Object} output - The structured output with decoded telemetry and attributes.\n */\n\nfunction decodePayload(input) {\n    // Initialize the output object with empty attributes and telemetry for clarity.\n    var result = { attributes: {}, telemetry: {}};\n\n\n    // Extract the timestamp from metadata (represented in milliseconds).\n    var timestamp = metadata.ts; // ts is the timestamp parsed from the incoming message's time, or returns the current time if it cannot be parsed.\n\n    // Initialize an object to store decoded key/value telemetry data.\n    var values = {};\n    \n    for (var i = 0; i < input.length; ) {\n        var channel_id = input[i++];\n        var channel_type = input[i++];\n\n        // IPSO VERSION\n        if (channel_id === 0xff && channel_type === 0x01) {\n            values.ipso_version = readProtocolVersion(input[i]);\n            i += 1;\n        }\n        // HARDWARE VERSION\n        else if (channel_id === 0xff && channel_type === 0x09) {\n            values.hardware_version = readHardwareVersion(java.util.Arrays.copyOfRange(input, i, i + 2));\n            i += 2;\n        }\n        // FIRMWARE VERSION\n        else if (channel_id === 0xff && channel_type === 0x0a) {\n            values.firmware_version = readFirmwareVersion(java.util.Arrays.copyOfRange(input, i, i + 2));\n            i += 2;\n        }\n        // TSL VERSION\n        else if (channel_id === 0xff && channel_type === 0xff) {\n            values.tsl_version = readTslVersion(java.util.Arrays.copyOfRange(input, i, i + 2));\n            i += 2;\n        }\n        // SERIAL NUMBER\n        else if (channel_id === 0xff && channel_type === 0x16) {\n            values.sn = readSerialNumber(java.util.Arrays.copyOfRange(input, i, i + 8));\n            i += 8;\n        }\n        // LORAWAN CLASS TYPE\n        else if (channel_id === 0xff && channel_type === 0x0f) {\n            values.lorawan_class = readLoRaWANClass(input[i]);\n            i += 1;\n        }\n        // RESET EVENT\n        else if (channel_id === 0xff && channel_type === 0xfe) {\n            values.reset_event = readResetEvent(1);\n            i += 1;\n        }\n        // DEVICE STATUS\n        else if (channel_id === 0xff && channel_type === 0x0b) {\n            values.device_status = readDeviceStatus(1);\n            i += 1;\n        }\n        // BATTERY\n        else if (channel_id === 0x01 && channel_type === 0x75) {\n            values.battery = input[i];\n            i += 1;\n        }\n        // OCCUPANCY\n        else if (channel_id === 0x03 && channel_type === 0x00) {\n            values.occupancy = readOccupancyStatus(input[i]);\n            i += 1;\n        }\n        // ILLUMINANCE\n        else if (channel_id === 0x04 && channel_type === 0x00) {\n            values.illuminance = readIlluminanceStatus(input[i]);\n            i += 1;\n        }\n        // DOWNLINK RESPONSE\n        else if (channel_id === 0xfe || channel_id === 0xff) {\n            result = handle_downlink_response(channel_type, input, i);\n            values = result.data;\n            i = result.offset;\n        } else if (channel_id === 0xf8 || channel_id === 0xf9) {\n            result = handle_downlink_response_ext(channel_id, channel_type, input, i);\n            values = result.data;\n            i = result.offset;\n        } else {\n            break;\n        }\n    }\n\n    // Combine the timestamp with values and add it to the telemetry.\n    result.telemetry = {\n        ts: timestamp,\n        values: values\n    };\n\n    // Return the fully constructed output object.\n    return result;\n}\n\nvar result = decodePayload(payload);\n\n// Return the final result object.\nreturn result;\n\n\nfunction hasResultFlag(code) {\n    return code === 0xf8;\n}\n\nfunction readResultStatus(status) {\n   switch (status) {\n        case 0:\n            return \"success\";\n        case 1:\n            return \"forbidden\";\n        case 2:\n            return \"invalid parameter\";\n        default:\n            return null;\n    }\n}\n\nfunction readProtocolVersion(bytes) {\n    var major = (bytes & 0xf0) >> 4;\n    var minor = bytes & 0x0f;\n    return \"v\" + major + \".\" + minor;\n}\n\nfunction readHardwareVersion(bytes) {\n    var major = bytes[0] & 0xff;\n    var minor = (bytes[1] & 0xff) >> 4;\n    return \"v\" + major + \".\" + minor;\n}\n\nfunction readFirmwareVersion(bytes) {\n    var major = bytes[0] & 0xff;\n    var minor = bytes[1] & 0xff;\n    return \"v\" + major + \".\" + minor;\n}\n\nfunction readTslVersion(bytes) {\n    var major = bytes[0] & 0xff;\n    var minor = bytes[1] & 0xff;\n    return \"v\" + major + \".\" + minor;\n}\n\nfunction readSerialNumber(bytes) {\n    var result = \"\";\n    foreach (b : bytes) {\n        result += String.format(\"%02x\", b & 0xFF);\n    }\n    return result;\n}\n\nfunction readLoRaWANClass(type) {\n    switch (type) {\n        case 0:\n            return \"Class A\";\n        case 1:\n            return \"Class B\";\n        case 2:\n            return \"Class C\";\n        case 3:\n            return \"Class CtoB\";\n        default:\n            return null; \n    }\n}\n\nfunction readResetEvent(status) {\n    switch (status) {\n        case 0:\n            return \"normal\";\n        case 1:\n            return \"reset\";\n        default:\n            return null;\n    }\n}\n\nfunction readDeviceStatus(status) {\n    switch (status) {\n        case 0:\n            return \"off\";\n        case 1:\n            return \"on\";\n        default:\n            return null;\n    }\n}\n\nfunction readOccupancyStatus(status) {\n    switch (status) {\n        case 0:\n            return \"vacant\";\n        case 1:\n            return \"occupied\";\n        default:\n            return null;\n    }\n}\n\nfunction readIlluminanceStatus(status) {\n    switch (status) {\n        case 0:\n            return \"dim\";\n        case 1:\n            return \"bright\";\n        case 254:\n            return \"disable\";\n        default:\n            return null;\n    }\n}\n\nfunction readEnableStatus(status) {\n    switch (status) {\n        case 0:\n            return \"disable\";\n        case 1:\n            return \"enable\";\n        default:\n            return null;\n    }\n}\n\nfunction readYesNoStatus(status) {\n    switch (status) {\n        case 0:\n            return \"no\";\n        case 1:\n            return \"yes\";\n        default:\n            return null;\n    }\n}\n\nfunction readReportType(status) {\n    switch (status) {\n        case 0:\n            return \"plan\";\n        case 1:\n            return \"periodic\";\n        default:\n            return null;\n    }\n}\n\nfunction readPirSensitivity(status) {\n    switch (status) {\n        case 0:\n            return \"low\";\n        case 1:\n            return \"medium\";\n        case 2:\n            return \"high\";\n        default:\n            return null;\n    }\n}\n\nfunction readPirWindowTime(status) {\n    switch (status) {\n        case 0:\n            return \"2s\";\n        case 1:\n            return \"4s\";\n        case 2:\n            return \"6s\";\n        case 3:\n            return \"8s\";\n        default:\n            return null;\n    }\n}\n\nfunction readPirPulseTimes(status) {\n    switch (status) {\n        case 0:\n            return \"1_times\";\n        case 1:\n            return \"2_times\";\n        case 2:\n            return \"3_times\";\n        case 3:\n            return \"4_times\";\n        default:\n            return null;\n    }\n}\n\nfunction readRadarSensitivity(status) {\n    switch (status) {\n        case 0:\n            return \"low\";\n        case 1:\n            return \"medium\";\n        case 2:\n            return \"high\";\n        default:\n            return null;\n    }\n}\n\nfunction readDstConfig(bytes) {\n    var offset = 0;\n\n    var dst_config = {};\n    var enable_value = bytes[offset];\n    dst_config.enable = readEnableStatus(enable_value);\n    dst_config.offset = bytes[offset + 1];\n    if (enable_value === 1) {\n        dst_config.start_month = readMonth(bytes[offset + 2]);\n        var start_week_value = bytes[offset + 3];\n        dst_config.start_week_num = start_week_value >> 4;\n        dst_config.start_week_day = readWeek(start_week_value & 0x0f);\n        dst_config.start_time = parseBytesToInt(bytes, offset + 4, 2);\n        dst_config.end_month = readMonth(bytes[offset + 6]);\n        var end_week_value = bytes[offset + 7];\n        dst_config.end_week_num = end_week_value >> 4;\n        dst_config.end_week_day = readWeek(end_week_value & 0x0f);\n        dst_config.end_time = parseBytesToInt(bytes, offset + 8, 2);\n    }\n    offset += 10;\n\n    return dst_config;\n}\n\nfunction readMonth(month) {\n    switch (month) {\n        case 1:\n            return \"January\";\n        case 2:\n            return \"February\";\n        case 3:\n            return \"March\";\n        case 4:\n            return \"April\";\n        case 5:\n            return \"May\";\n        case 6:\n            return \"June\";\n        case 7:\n            return \"July\";\n        case 8:\n            return \"August\";\n        case 9:\n            return \"September\";\n        case 10:\n            return \"October\";\n        case 11:\n            return \"November\";\n        case 12:\n            return \"December\";\n        default:\n            return null;\n    }\n}\n\nfunction readWeek(week) {\n    switch (week) {\n        case 1:\n            return \"Monday\";\n        case 2:\n            return \"Tuesday\";\n        case 3:\n            return \"Wednesday\";\n        case 4:\n            return \"Thursday\";\n        case 5:\n            return \"Friday\";\n        case 6:\n            return \"Saturday\";\n        case 7:\n            return \"Sunday\";\n        default:\n            return null;\n    }\n}\n\nfunction readTimeZone(time) {\n    switch (time) {\n        case -720: return \"UTC-12\";\n        case -660: return \"UTC-11\";\n        case -600: return \"UTC-10\";\n        case -570: return \"UTC-9:30\";\n        case -540: return \"UTC-9\";\n        case -480: return \"UTC-8\";\n        case -420: return \"UTC-7\";\n        case -360: return \"UTC-6\";\n        case -300: return \"UTC-5\";\n        case -240: return \"UTC-4\";\n        case -210: return \"UTC-3:30\";\n        case -180: return \"UTC-3\";\n        case -120: return \"UTC-2\";\n        case -60: return \"UTC-1\";\n        case 0: return \"UTC\";\n        case 60: return \"UTC+1\";\n        case 120: return \"UTC+2\";\n        case 180: return \"UTC+3\";\n        case 210: return \"UTC+3:30\";\n        case 240: return \"UTC+4\";\n        case 270: return \"UTC+4:30\";\n        case 300: return \"UTC+5\";\n        case 330: return \"UTC+5:30\";\n        case 345: return \"UTC+5:45\";\n        case 360: return \"UTC+6\";\n        case 390: return \"UTC+6:30\";\n        case 420: return \"UTC+7\";\n        case 480: return \"UTC+8\";\n        case 540: return \"UTC+9\";\n        case 570: return \"UTC+9:30\";\n        case 600: return \"UTC+10\";\n        case 630: return \"UTC+10:30\";\n        case 660: return \"UTC+11\";\n        case 720: return \"UTC+12\";\n        case 750: return \"UTC+12:45\";\n        case 780: return \"UTC+13\";\n        case 840: return \"UTC+14\";\n        default: return null;\n    }\n}\n\nfunction readD2DMasterConfig(bytes) {\n    var offset = 0;\n    var config = {};\n    config.mode = readD2DMode(bytes[offset]);\n    config.enable = readEnableStatus(bytes[offset + 1]);\n    config.lora_uplink_enable = readEnableStatus(bytes[offset + 2]);\n    config.d2d_cmd = readD2DCommand(java.util.Arrays.copyOfRange(bytes, offset + 3, offset + 5));\n    config.time = parseBytesToInt(bytes, offset + 5, 2);\n    config.time_enable = readEnableStatus(bytes[offset + 7]);\n    return config;\n}\n\nfunction readD2DCommand(bytes) {\n     if (bytes == null || bytes.length < 2) {\n        return null;\n    }\n    \n    var hex1 = String.format(\"%02x\", bytes[1] & 0xFF);\n    var hex0 = String.format(\"%02x\", bytes[0] & 0xFF);\n    \n    return hex1 + hex0;\n}\n\nfunction readD2DMode(type) {\n    switch (type) {\n        case 0:\n            return \"occupied\";\n        case 1:\n            return \"vacant\";\n        case 2:\n            return \"bright\";\n        case 3:\n            return \"dim\";\n        case 4:\n            return \"occupied_bright\";\n        case 5:\n            return \"occupied_dim\";\n        default:\n            return null;\n    }\n}\n\nfunction readHibernateConfig(bytes) {\n    var offset = 0;\n    var config = {};\n    config.id = bytes[offset] + 1;\n    config.enable = readEnableStatus(bytes[offset + 1]);\n    config.start_time = parseBytesToInt(bytes, offset + 2, 2);\n    config.end_time = parseBytesToInt(bytes, offset + 4, 2);\n    return config;\n}\n\nfunction readHexString(bytes) {\n    var result = \"\";\n    for (var i = 0; i < bytes.length; i++) {\n        result += String.format(\"%02x\", bytes[i] & 0xFF);\n    }\n    return result;\n}\n\nfunction handle_downlink_response(channel_type, bytes, offset) {\n    var decoded = {};\n\n    switch (channel_type) {\n        case 0x10:\n            decoded.reboot = readYesNoStatus(1);\n            offset += 1;\n            break;\n        case 0x28:\n            decoded.report_status = readReportType(bytes[offset]);\n            offset += 1;\n            break;\n        case 0x35:\n            decoded.d2d_key = readHexString(java.util.Arrays.copyOfRange(bytes, offset, offset + 8));\n            offset += 8;\n            break;\n        case 0x4a:\n            decoded.sync_time = readYesNoStatus(1);\n            offset += 1;\n            break;\n        case 0x84:\n            decoded.d2d_enable = readEnableStatus(bytes[offset]);\n            offset += 1;\n            break;\n        case 0x8e:\n            // ignore the first byte\n            decoded.report_interval = parseBytesToInt(bytes, offset + 1, 2);\n            offset += 3;\n            break;\n        case 0x8f:\n            decoded.bluetooth_enable = readEnableStatus(bytes[offset]);\n            offset += 1;\n            break;\n        case 0x96:\n            var d2d_master_config = readD2DMasterConfig(java.util.Arrays.copyOfRange(bytes, offset, offset + 8));\n            offset += 8;\n            decoded.d2d_master_config = decoded.d2d_master_config != null ? decoded.d2d_master_config : [];\n            decoded.d2d_master_config.push(d2d_master_config);\n            break;\n        case 0xba:\n            decoded.dst_config = readDstConfig(java.util.Arrays.copyOfRange(bytes, offset, offset + 10));\n            offset += 10;\n            break;\n        case 0xbd:\n            decoded.time_zone = readTimeZone(parseBytesToInt(bytes, offset, 2));\n            offset += 2;\n            break;\n        default:\n            break;\n    }\n\n    return { data: decoded, offset: offset };\n}\n\nfunction handle_downlink_response_ext(code, channel_type, bytes, offset) {\n    var decoded = {};\n\n    switch (channel_type) {\n        case 0x3e:\n            decoded.pir_sensitivity = readPirSensitivity(bytes[offset]);\n            offset += 1;\n            break;\n        case 0x3f:\n            decoded.radar_sensitivity = readRadarSensitivity(bytes[offset]);\n            offset += 1;\n            break;\n        case 0x40:\n            decoded.pir_idle_interval = bytes[offset];\n            offset += 1;\n            break;\n        case 0x41:\n            decoded.pir_illuminance_threshold = {};\n            decoded.pir_illuminance_threshold.enable = readEnableStatus(bytes[offset]);\n            decoded.pir_illuminance_threshold.upper_limit = parseBytesToInt(bytes, offset + 1, 2);\n            decoded.pir_illuminance_threshold.lower_limit =  parseBytesToInt(bytes, offset + 3, 2);\n            offset += 5;\n            break;\n        case 0x42:\n            decoded.pir_window_time = readPirWindowTime(bytes[offset]);\n            offset += 1;\n            break;\n        case 0x43:\n            decoded.pir_pulse_times = readPirPulseTimes(bytes[offset]);\n            offset += 1;\n            break;\n        case 0x44:\n            var hibernate_config = readHibernateConfig(java.util.Arrays.copyOfRange(bytes, offset, offset + 6));\n            offset += 6;\n            decoded.hibernate_config = decoded.hibernate_config != null ? decoded.hibernate_config : [];\n            decoded.hibernate_config.push(hibernate_config);\n            break;\n        default:\n            break;\n    }\n\n    if (hasResultFlag(code)) {\n        var result_value = bytes[offset];\n        offset += 1;\n\n        if (result_value != 0) {\n            var request = decoded;\n            decoded = {};\n            decoded.device_response_result = {};\n            decoded.device_response_result.channel_type = channel_type;\n            decoded.device_response_result.result = readResultStatus(result_value);\n            decoded.device_response_result.request = request;\n        }\n    }\n\n    return { data: decoded, offset: offset };\n}",
    "encoder": null,
    "tbelEncoder": null,
    "updateOnlyKeys": [
      "eui",
      "devAddr",
      "fPort",
      "bandwidth",
      "spreadingFactor",
      "codeRate",
      "frequency",
      "tenantId"
    ],
    "type": "DEVICE",
    "name": "Device $eui",
    "profile": "$applicationId",
    "label": "$deviceId",
    "customer": "",
    "group": "",
    "telemetry": null,
    "attributes": [
      "eui",
      "devAddr",
      "fPort",
      "bandwidth",
      "codeRate",
      "frequency",
      "tenantId",
      "applicationId",
      "spreadingFactor",
      "deviceId",
      "joinEui",
      "netId",
      "clusterId",
      "clusterAddress"
    ]
  },
  "additionalInfo": {
    "description": ""
  },
  "edgeTemplate": false,
  "converterVersion": 2
}