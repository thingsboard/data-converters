{
  "name": "Things Stack Industries Uplink Converter for Lansitec Temperature Humidity Sensor",
  "type": "UPLINK",
  "debugMode": false,
  "debugSettings": {
    "failuresEnabled": false,
    "allEnabled": false,
    "allEnabledUntil": 0
  },
  "configuration": {
    "scriptLang": "TBEL",
    "decoder": "// Decode an uplink message from a buffer\n// payload - array of bytes\n// metadata - key/value object\n\n/** Decoder **/\n\n// decode payload to string\nvar payloadStr = decodeToString(payload);\n\n// decode payload to JSON\n// var data = decodeToJson(payload);\n\nvar deviceName = 'Device A';\nvar deviceType = 'thermostat';\nvar customerName = 'Customer C';\nvar groupName = 'thermostat devices';\nvar manufacturer = 'Example corporation';\n// use assetName and assetType instead of deviceName and deviceType\n// to automatically create assets instead of devices.\n// var assetName = 'Asset A';\n// var assetType = 'building';\n\n// Result object with device/asset attributes/telemetry data\nvar result = {\n// Use deviceName and deviceType or assetName and assetType, but not both.\n   deviceName: deviceName,\n   deviceType: deviceType,\n// assetName: assetName,\n// assetType: assetType,\n// customerName: customerName,\n   groupName: groupName,\n   attributes: {\n       model: 'Model A',\n       serialNumber: 'SN111',\n       integrationName: metadata['integrationName'],\n       manufacturer: manufacturer\n   },\n   telemetry: {\n       temperature: 42,\n       humidity: 80,\n       rawData: payloadStr\n   }\n};\n\n/** Helper functions **/\n\nfunction decodeToString(payload) {\n   return String.fromCharCode.apply(String, payload);\n}\n\nfunction decodeToJson(payload) {\n   // covert payload to string.\n   var str = decodeToString(payload);\n\n   // parse string to JSON\n   var data = JSON.parse(str);\n   return data;\n}\n\nreturn result;",
    "tbelDecoder": "// Temperature Humidity\r\nfunction decodeUplink(input) {\r\n\r\n  // type\r\n  var uplinkType = (input[0] >> 4) & 0x0f;\r\n\r\n  switch (uplinkType) {\r\n    case 0x01:\r\n      return decodeRegistration(input) ;\r\n\r\n    case 0x02:\r\n      return decodeHeartbeat(input) ;\r\n\r\n    case 0x0f:\r\n      return decodeAcknowledgment(input) ;\r\n\r\n    default:\r\n      return null;\r\n  }\r\n}\r\n\r\n// type: 0x1 Registration\r\nfunction decodeRegistration(bytes) {\r\n  var data = {};\r\n  data.type = \"Registration\";\r\n  // adr\r\n  data.adr = ((bytes[0] >> 3) & 0x1) == 0 ? \"OFF\" : \"ON\";\r\n  // mode\r\n  var modeValue = bytes[0] & 0x07;\r\n  if (modeValue == 0x01) {\r\n    data.mode = \"AU920\";\r\n  } else if (modeValue == 0x02) {\r\n    data.mode = \"CLAA\";\r\n  } else if (modeValue == 0x03) {\r\n    data.mode = \"CN470\";\r\n  } else if (modeValue == 0x04) {\r\n    data.mode = \"AS923\";\r\n  } else if (modeValue == 0x05) {\r\n    data.mode = \"EU433\";\r\n  } else if (modeValue == 0x06) {\r\n    data.mode = \"EU868\";\r\n  } else if (modeValue == 0x07) {\r\n    data.mode = \"US915\";\r\n  }\r\n  // smode\r\n  var smodeValue = bytes[1];\r\n  if (smodeValue == 0x01) {\r\n    data.smode = \"AU920\";\r\n  } else if (smodeValue == 0x02) {\r\n    data.smode = \"CLAA\";\r\n  } else if (smodeValue == 0x04) {\r\n    data.smode = \"CN470\";\r\n  } else if (smodeValue == 0x08) {\r\n    data.smode = \"AS923\";\r\n  } else if (smodeValue == 0x10) {\r\n    data.smode = \"EU433\";\r\n  } else if (smodeValue == 0x20) {\r\n    data.smode = \"EU868\";\r\n  } else if (smodeValue == 0x40) {\r\n    data.smode = \"US915\";\r\n  }\r\n  // power\r\n  data.power = ((bytes[2] >> 3) & 0x1f) + \"dBm\";\r\n  // reserved\r\n  var reservedValue = bytes[2] & 0x07;\r\n  if (reservedValue == 1) {\r\n    data.frequencySweepMode = \"A mode\";\r\n  } else if (reservedValue == 2) {\r\n    data.frequencySweepMode = \"B mode\";\r\n  } else if (reservedValue == 3) {\r\n    data.frequencySweepMode = \"C mode\";\r\n  } else if (reservedValue == 4) {\r\n    data.frequencySweepMode = \"D mode\";\r\n  } else if (reservedValue == 5) {\r\n    data.frequencySweepMode = \"E mode\";\r\n  } else if (reservedValue == 6) {\r\n    data.frequencySweepMode = \"All frequency sweep\";\r\n  }\r\n  // dr\r\n  data.dr = (bytes[3] >> 4) & 0x0f;\r\n  // repting\r\n  data.repting = ((bytes[3] >> 3) & 0x01) == 0 ? \"false\" : \"true\";\r\n  // temperatureReportPeriod\r\n  data.temperatureReportPeriod =\r\n    (((bytes[4] << 8) & 0xff00) | (bytes[5] & 0xff)) * 10 + \"s\";\r\n  // crc\r\n  data.crc = ((bytes[6] << 8) & 0xff00) | (bytes[7] & 0xff);\r\n  return data;\r\n}\r\n\r\n// type: 0x2 Heartbeat\r\nfunction decodeHeartbeat(bytes) {\r\n  var data = {};\r\n  // type\r\n  data.type = \"Heartbeat\";\r\n  // version\r\n  data.version = bytes[0] & 0x0f;\r\n  // battery\r\n  data.battery = bytes[1] + \"%\";\r\n  // rssi\r\n  data.rssi = bytes[2] * -1 + \"dBm\";\r\n  // snr\r\n  data.snr = (((bytes[3] << 8) & 0xff00) | (bytes[4] & 0xff)) / 100;\r\n  // temperature\r\n  if (0 == ((bytes[5] >> 7) & 0x01)) {\r\n    var tempInt = bytes[5] & 0x7f;\r\n    var tempFra = bytes[6];\r\n    data.temperature = tempInt + \".\" + tempFra + \"℃\";\r\n  } else {\r\n    var tempInt = (bytes[5] & 0x7f) * -1;\r\n    var tempFra = bytes[6];\r\n    data.temperature = tempInt + \".\" + tempFra + \"℃\";\r\n  }\r\n  // humidity\r\n  data.humidity = bytes[7] + \"%\";\r\n  // crc\r\n  data.crc = ((bytes[8] << 8) & 0xff00) | (bytes[9] & 0xff);\r\n\r\n  return data;\r\n}\r\n\r\n// type: 0xf Acknowledgment\r\nfunction decodeAcknowledgment(bytes) {\r\n  var data = {};\r\n  data.type = \"Acknowledgment\";\r\n  data.result = (bytes[0] & 0x0f) == 0 ? \"Success\" : \"Failure\";\r\n  data.msgId = (bytes[1] & 0xff).toString(16).toUpperCase();\r\n\r\n  return data;\r\n}\r\n\r\n\r\n// TBEL\r\nvar deviceData = decodeToJson(payload);\r\nvar deviceName = deviceData.end_device_ids.dev_eui;\r\nvar deviceType = deviceData.end_device_ids.application_ids.application_id;\r\n\r\n\r\nvar result = {\r\n  deviceName: deviceName,\r\n  deviceType: deviceType,\r\n  telemetry: decodeUplink(base64ToBytes(deviceData.uplink_message.frm_payload)),\r\n};\r\n\r\nfunction decodeToString(payload) {\r\n  return String.fromCharCode.apply(String, payload);\r\n}\r\n\r\nfunction decodeToJson(payload) {\r\n  var str = decodeToString(payload);\r\n  var data = JSON.parse(str);\r\n  return data;\r\n}\r\n\r\nreturn result;",
    "encoder": null,
    "tbelEncoder": null,
    "updateOnlyKeys": [
      "manufacturer"
    ]
  },
  "additionalInfo": {
    "description": ""
  },
  "edgeTemplate": false
}