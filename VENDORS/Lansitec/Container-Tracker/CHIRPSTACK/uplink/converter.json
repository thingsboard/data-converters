{
  "name": "ChirpStack Uplink Converter for Lansitec Container Tracker",
  "type": "UPLINK",
  "debugMode": false,
  "debugSettings": {
    "failuresEnabled": true,
    "allEnabled": false,
    "allEnabledUntil": 1745487067758
  },
  "configuration": {
    "scriptLang": "TBEL",
    "decoder": null,
    "tbelDecoder": "// Container Tracker\r\nfunction decodeUplink(input) {\r\n  // type\r\n  var uplinkType = (input[0] >> 4) & 0x0f;\r\n\r\n  switch (uplinkType) {\r\n    case 0x01:\r\n      return  decodeRegistration(input) ;\r\n\r\n    case 0x02:\r\n      return  decodeHeartbeat(input) ;\r\n\r\n    case 0x03:\r\n      return  decodeGNSSPosition(input) ;\r\n\r\n    case 0x06:\r\n      return  decodeMovementThreshold(input) ;\r\n\r\n    case 0x07:\r\n      return  decodePositionBeacon(input) ;\r\n\r\n    case 0x08:\r\n      return  decodeAssetBeacon(input) ;\r\n\r\n    case 0x09:\r\n      return  decodeAlarm(input) ;\r\n\r\n    case 0x0a:\r\n      return  decodeVibrationShockDetectionReport(input) ;\r\n\r\n    case 0x0b:\r\n      return  decodeOfflineCachePosition(input) ;\r\n\r\n    default:\r\n      return null;\r\n  }\r\n}\r\n// type: 0x1 Registration\r\nfunction decodeRegistration(bytes) {\r\n  var data = {};\r\n  data.type = \"Registration\";\r\n  data.adr = ((bytes[0] >> 3) & 0x1) == 0 ? \"OFF\" : \"ON\";\r\n  // mode\r\n  data.mode = 0x00;\r\n  // smode\r\n  data.smode = 0x00;\r\n  // power\r\n  data.power = ((bytes[2] >> 3) & 0x1f) + \"dBm\";\r\n  // offlineCacheEnable\r\n  data.offlineCacheEnable =\r\n    ((bytes[2] >> 2) & 0x01) == 0 ? \"Disable\" : \"Enable\";\r\n  // alarmEnable\r\n  data.alarmEnable = ((bytes[2] >> 1) & 0x01) == 0 ? \"Disable\" : \"Enable\";\r\n  // singleKeyEnable\r\n  data.singleKeyEnable = (bytes[2] & 0x01) == 0 ? \"Disable\" : \"Enable\";\r\n  // dr\r\n  data.dr = (bytes[3] >> 4) & 0x0f;\r\n  // gnssEnable\r\n  data.gnssEnable = ((bytes[3] >> 3) & 0x01) == 0 ? \"Disable\" : \"Enable\";\r\n  // positionReportMode\r\n  var positionReportModeValue = (bytes[3] >> 1) & 0x03;\r\n  if (positionReportModeValue == 0) {\r\n    data.positionReportMode = \"Period\";\r\n  } else if (positionReportModeValue == 1) {\r\n    data.positionReportMode = \"Autonomous\";\r\n  } else if (positionReportModeValue == 2) {\r\n    data.positionReportMode = \"On-Demand\";\r\n  }\r\n  // switchEnable\r\n  data.switchEnable = (bytes[3] & 0x01) == 0 ? \"Disable\" : \"Enable\";\r\n  // heartbeatReportInterval\r\n  data.heartbeatReportInterval =\r\n    (((bytes[4] << 8) & 0xff00) | (bytes[5] & 0xff)) * 30 + \"s\";\r\n  // blePositionReportInterval\r\n  data.blePositionReportInterval =\r\n    (((bytes[6] << 8) & 0xff00) | (bytes[7] & 0xff)) * 5 + \"s\";\r\n  // div\r\n  data.div = bytes[8] & 0xff;\r\n  // bleEnable\r\n  data.bleEnable = (bytes[9] & 0x01) == 0 ? \"Disable\" : \"Enable\";\r\n  // positioningUUID\r\n  var positioningUUID = \"\";\r\n  for (var i = 0; i < 4; i++) {\r\n    var byte1 = bytes[10 + 4 * i];\r\n    var byte2 = bytes[11 + 4 * i];\r\n    var byte3 = bytes[12 + 4 * i];\r\n    var byte4 = bytes[13 + 4 * i];\r\n\r\n    var part1 = ((byte1 << 8) | byte2)\r\n      .toString(16)\r\n      .padStart(4, \"0\")\r\n      .toUpperCase();\r\n    var part2 = ((byte3 << 8) | byte4)\r\n      .toString(16)\r\n      .padStart(4, \"0\")\r\n      .toUpperCase();\r\n\r\n    positioningUUID += part1 + part2;\r\n  }\r\n  data.positioningUUID = positioningUUID;\r\n  // accelerometerThreshold\r\n  data.accelerometerThreshold = (50 + bytes[26] * 5) * 0.001 + \"g\";\r\n  // version\r\n  data.version = (((bytes[27] << 8) & 0xff00) | (bytes[28] & 0xff))\r\n    .toString(16)\r\n    .toUpperCase();\r\n  // cfmmsg\r\n  data.cfmmsg = bytes[29];\r\n  // hbCount\r\n  data.hbCount = bytes[30];\r\n  // assetBeaconReportPeriod\r\n  data.assetBeaconReportPeriod = bytes[31] + \"min\";\r\n  // bluetoothReceivingDuration\r\n  data.bluetoothReceivingDuration = bytes[32] + \"s\";\r\n  // extraAssetBeaconReportInterval\r\n  data.extraAssetBeaconReportInterval = bytes[33] + \"s\";\r\n  // assetBeaconUUID\r\n  var assetBeaconUUID = \"\";\r\n  for (var i = 0; i < 4; i++) {\r\n    var byte1 = bytes[34 + 4 * i];\r\n    var byte2 = bytes[35 + 4 * i];\r\n    var byte3 = bytes[36 + 4 * i];\r\n    var byte4 = bytes[37 + 4 * i];\r\n\r\n    var part1 = ((byte1 << 8) | byte2)\r\n      .toString(16)\r\n      .toUpperCase()\r\n      .padStart(4, \"0\");\r\n    var part2 = ((byte3 << 8) | byte4)\r\n      .toString(16)\r\n      .toUpperCase()\r\n      .padStart(4, \"0\");\r\n\r\n    assetBeaconUUID += part1 + part2;\r\n  }\r\n  data.assetBeaconUUID = assetBeaconUUID;\r\n  // vibrationShockDetectionThreshold\r\n  data.vibrationShockDetectionThreshold = (50 + bytes[50] * 5) * 0.001 + \"g\";\r\n  // vibrationShockDetectionReportPeriod\r\n  data.vibrationShockDetectionReportPeriod = bytes[51] * 30 + \"s\";\r\n  // gnssPositionReportInterval\r\n  data.gnssPositionReportInterval =\r\n    (((bytes[52] << 8) & 0xff00) | (bytes[53] & 0xff)) * 5 + \"s\";\r\n\r\n  return data;\r\n}\r\n\r\n// type: 0x2 Heartbeat\r\nfunction decodeHeartbeat(bytes) {\r\n  var data = {};\r\n  data.type = \"Heartbeat\";\r\n  // snrEnable\r\n  data.snrEnable = (bytes[0] & 0x0f) == 0 ? \"No SNR field\" : \"SNR field Enable\";\r\n  // voltage\r\n  data.voltage = bytes[1] / 100 + 1.5 + \"V\";\r\n  // rssi\r\n  data.rssi = bytes[2] * -1 + \"dBm\";\r\n  // snr\r\n  data.snr = (((bytes[3] << 8) & 0xff00) | (bytes[4] & 0xff)) / 100 + \"dB\";\r\n\r\n  // gnssState\r\n  var gnssStateValue = (bytes[5] >> 4) & 0x0f;\r\n  if (gnssStateValue == 0) {\r\n    data.gnssState = \"Off\";\r\n  } else if (gnssStateValue == 1) {\r\n    data.gnssState = \"Boot GNSS\";\r\n  } else if (gnssStateValue == 2) {\r\n    data.gnssState = \"Locating\";\r\n  } else if (gnssStateValue == 3) {\r\n    data.gnssState = \"Located\";\r\n  } else if (gnssStateValue == 9) {\r\n    data.gnssState = \"No signal\";\r\n  }\r\n  // moveState\r\n  data.moveState = bytes[5] & 0x0f;\r\n  // temperature\r\n  data.temperature = (((bytes[6] << 8) & 0xff00) | (bytes[7] & 0xff)) + \"â„ƒ\";\r\n  // movement\r\n  data.movement = (((bytes[8] << 8) & 0xff00) | (bytes[9] & 0xff)) * 5 + \"s\";\r\n\r\n  return data;\r\n}\r\n\r\n// type: 0x03 GNSSPosition\r\nfunction decodeGNSSPosition(bytes) {\r\n  var data = {};\r\n  data.type = \"GNSSPosition\";\r\n  // longitude\r\n  var longitude =\r\n    (bytes[1] << 24) | (bytes[2] << 16) | (bytes[3] << 8) | bytes[4];\r\n  data.longitude = hex2float(longitude);\r\n\r\n  // latitude\r\n  var latitude =\r\n    (bytes[5] << 24) | (bytes[6] << 16) | (bytes[7] << 8) | bytes[8];\r\n  data.latitude = hex2float(latitude);\r\n\r\n  // time\r\n  var time =\r\n    (bytes[9] << 24) | (bytes[10] << 16) | (bytes[11] << 8) | bytes[12];\r\n  data.time = time;\r\n\r\n  return data;\r\n}\r\n\r\n// type: 0x06 MovementThreshold\r\nfunction decodeMovementThreshold() {\r\n  var data = {};\r\n  data.type = \"MovementThreshold\";\r\n  data.thresholdFlag = bytes[1];\r\n  data.movementThreshold = bytes[2];\r\n  data.stationaryThreshold = bytes[3];\r\n\r\n  return data;\r\n}\r\n\r\n// type: 0x07 PositionBeacon\r\nfunction decodePositionBeacon(bytes) {\r\n  var data = {\r\n    type: \"PositionBeacon\",\r\n    length: bytes[0] & 0x0F\r\n  };\r\n\r\n  for (var i = 0; i < data.length; i++) {\r\n    var baseIndex = 6 + 5 * i;\r\n    var major = intToHex(parseBytesToInt(bytes, baseIndex, 2, true), true, false);\r\n    var minor = intToHex(parseBytesToInt(bytes, baseIndex + 2, 2, true), true, false);\r\n    var rssi = parseBytesToInt(bytes, baseIndex + 4, 1, true) - 256 + \"dBm\";\r\n\r\n    data[\"beacon\" + (i + 1)] = padStart(major, 4, \"0\") + padStart(minor, 4, \"0\");\r\n    data[\"rssi\" + (i + 1)] = rssi;\r\n  }\r\n\r\n  return data;\r\n}\r\n\r\n// type: 0x08 AssetBeacon\r\nfunction decodeAssetBeacon(bytes) {\r\n  var data = {\r\n    type: \"AssetBeacon\",\r\n    qty: bytes[1] & 0xFF\r\n  };\r\n\r\n  for (var i = 0; i < data.qty; i++) {\r\n    var baseIndex = 2 + 5 * i;\r\n    var major = intToHex(parseBytesToInt(bytes, baseIndex, 2, true), true, false);\r\n    var minor = intToHex(parseBytesToInt(bytes, baseIndex + 2, 2, true), true, false);\r\n    var rssi = parseBytesToInt(bytes, baseIndex + 4, 1, true) - 256 + \"dBm\";\r\n\r\n    data[\"beacon\" + (i + 1)] = padStart(major, 4, \"0\") + padStart(minor, 4, \"0\");\r\n    data[\"rssi\" + (i + 1)] = rssi;\r\n  }\r\n\r\n  return data;\r\n}\r\n\r\n// type: 0x09 Alarm\r\nfunction decodeAlarm(bytes) {\r\n  var data = {};\r\n  data.type = \"Alarm\";\r\n  var alarmValue = bytes[1] & 0xff;\r\n  if (alarmValue == 1) {\r\n    data.alarm = \"Alarm\";\r\n  }\r\n  return data;\r\n}\r\n\r\n// type: 0x0B OfflineCachePosition\r\nfunction decodeOfflineCachePosition(bytes) {\r\n  var data = {\r\n    type: \"OfflineCachePosition\",\r\n    length: bytes[0] & 0x0F,\r\n    cacheDataType: bytes[1] & 0xFF\r\n  };\r\n\r\n  var beaconIndex = 1;\r\n  var gnssIndex = 1;\r\n  var index = 2;\r\n\r\n  for (var i = 0; i < data.length; i++) {\r\n    var flag = (data.cacheDataType >> (7 - i)) & 0x01;\r\n\r\n    if (flag === 0) {\r\n      var major = intToHex(parseBytesToInt(bytes, index, 2, true), true, false);\r\n      var minor = intToHex(parseBytesToInt(bytes, index + 2, 2, true), true, false);\r\n      var rssi = parseBytesToInt(bytes, index + 4, 1, true) - 256 + \"dBm\";\r\n\r\n      data[\"beacon\" + beaconIndex] = padStart(major, 4, \"0\") + padStart(minor, 4, \"0\");\r\n      data[\"rssi\" + beaconIndex] = rssi;\r\n\r\n      beaconIndex += 1;\r\n      index += 5;\r\n    } else if (flag === 1) {\r\n      var gnss = {};\r\n      var longitude = parseBytesToInt(bytes, index, 4, true);\r\n      var latitude = parseBytesToInt(bytes, index + 4, 4, true);\r\n      var time = parseBytesToInt(bytes, index + 8, 4, true);\r\n\r\n      gnss.longitude = hex2float(longitude);\r\n      gnss.latitude = hex2float(latitude);\r\n      gnss.time = time;\r\n\r\n      data[\"longitude\" + gnssIndex] = gnss.longitude;\r\n      data[\"latitude\" + gnssIndex] = gnss.latitude;\r\n      data[\"time\" + gnssIndex] = gnss.time;\r\n\r\n      gnssIndex += 1;\r\n      index += 12;\r\n    }\r\n  }\r\n\r\n  return data;\r\n}\r\n\r\n// type: 0x0A VibrationShockDetectionReport\r\nfunction decodeVibrationShockDetectionReport(bytes) {\r\n  var data = {};\r\n  data.type = \"VibrationShockDetectionReport\";\r\n  data.vibrationShockCount = ((bytes[1] << 8) & 0xff00) | (bytes[2] & 0xff);\r\n  return data;\r\n}\r\n\r\nfunction hex2float(num) {\r\n  var sign = num & 0x80000000 ? -1 : 1;\r\n  var exponent = ((num >> 23) & 0xff) - 127;\r\n  var mantissa = 1 + (num & 0x7fffff) / 0x7fffff;\r\n  return sign * mantissa * Math.pow(2, exponent);\r\n}\r\n\r\n\r\n// TBEL\r\nvar deviceData = decodeToJson(payload);\r\nvar deviceName = deviceData.deviceInfo.deviceName;\r\nvar deviceType = deviceData.deviceInfo.deviceProfileName;\r\n\r\nvar result = {\r\n  deviceName: deviceName,\r\n  deviceType: deviceType,\r\n  telemetry: decodeUplink(base64ToBytes(deviceData.data)),\r\n};\r\n\r\nfunction decodeToString(payload) {\r\n  return String.fromCharCode.apply(String, payload);\r\n}\r\n\r\nfunction decodeToJson(payload) {\r\n  var str = decodeToString(payload);\r\n  var data = JSON.parse(str);\r\n  return data;\r\n}\r\n\r\nreturn result;",
    "encoder": null,
    "tbelEncoder": null,
    "updateOnlyKeys": [
      "tenantId",
      "tenantName",
      "applicationId",
      "applicationName",
      "deviceProfileId",
      "deviceProfileName",
      "devEui",
      "devAddr",
      "fPort",
      "frequency",
      "bandwidth",
      "spreadingFactor",
      "codeRate",
      "battery",
      "pir",
      "daylight",
      "confirmed",
      "gatewayId",
      "channel",
      "rfChain",
      "crcStatus"
    ]
  },
  "additionalInfo": {
    "description": ""
  },
  "edgeTemplate": false
}