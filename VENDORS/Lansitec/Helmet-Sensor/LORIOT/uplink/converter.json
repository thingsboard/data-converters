{
  "name": "Loriot Uplink Converter for Lansitec Helmet Sensor",
  "type": "UPLINK",
  "debugMode": false,
  "debugSettings": {
    "failuresEnabled": false,
    "allEnabled": false,
    "allEnabledUntil": 0
  },
  "configuration": {
    "scriptLang": "TBEL",
    "decoder": "// Decode an uplink message from a buffer\n// payload - array of bytes\n// metadata - key/value object\n\n/** Decoder **/\n\n// decode payload to string\nvar payloadStr = decodeToString(payload);\n\n// decode payload to JSON\n// var data = decodeToJson(payload);\n\nvar deviceName = 'Device A';\nvar deviceType = 'thermostat';\nvar customerName = 'Customer C';\nvar groupName = 'thermostat devices';\nvar manufacturer = 'Example corporation';\n// use assetName and assetType instead of deviceName and deviceType\n// to automatically create assets instead of devices.\n// var assetName = 'Asset A';\n// var assetType = 'building';\n\n// Result object with device/asset attributes/telemetry data\nvar result = {\n// Use deviceName and deviceType or assetName and assetType, but not both.\n   deviceName: deviceName,\n   deviceType: deviceType,\n// assetName: assetName,\n// assetType: assetType,\n// customerName: customerName,\n   groupName: groupName,\n   attributes: {\n       model: 'Model A',\n       serialNumber: 'SN111',\n       integrationName: metadata['integrationName'],\n       manufacturer: manufacturer\n   },\n   telemetry: {\n       temperature: 42,\n       humidity: 80,\n       rawData: payloadStr\n   }\n};\n\n/** Helper functions **/\n\nfunction decodeToString(payload) {\n   return String.fromCharCode.apply(String, payload);\n}\n\nfunction decodeToJson(payload) {\n   // covert payload to string.\n   var str = decodeToString(payload);\n\n   // parse string to JSON\n   var data = JSON.parse(str);\n   return data;\n}\n\nreturn result;",
    "tbelDecoder": "function decodeUplink(input) {\r\n  // type\r\n  var uplinkType = (input[0] >> 4) & 0x0f;\r\n  switch (uplinkType) {\r\n    case 0x01:\r\n      return decodeRegistration(input) ;\r\n\r\n    case 0x02:\r\n      return decodeHeartbeat(input) ;\r\n\r\n    case 0x03:\r\n      return decodeGNSSPosition(input) ;\r\n\r\n    case 0x05:\r\n      return decodeUUIDReport(input) ;\r\n\r\n    case 0x07:\r\n      return decodeBeacon(input) ;\r\n\r\n    case 0x08:\r\n      return decodeAlarm(input) ;\r\n\r\n    default:\r\n      return null;\r\n  }\r\n}\r\n\r\n// type: 0x1 Registration\r\nfunction decodeRegistration(bytes) {\r\n  var data = {};\r\n  data.type = \"Registration\";\r\n  // adr\r\n  data.adr = ((bytes[0] >> 3) & 0x1) == 0 ? \"OFF\" : \"ON\";\r\n  // power\r\n  data.power = ((bytes[2] >> 3) & 0x1f) + \"dBm\";\r\n  // dr\r\n  data.dr = (bytes[3] >> 4) & 0x0f;\r\n  // gnssEnable\r\n  data.gnssEnable = ((bytes[3] >> 3) & 0x01) == 0 ? \"Disable\" : \"Enable\";\r\n  // positionReportMode\r\n  var positionReportMode = (bytes[3] >> 1) & 0x03;\r\n  if (positionReportMode == 0) {\r\n    data.positionReportMode = \"Period\";\r\n  } else if (positionReportMode == 0) {\r\n    data.positionReportMode = \"Autonomous\";\r\n  } else if (positionReportMode == 0) {\r\n    data.positionReportMode = \"On-Demand\";\r\n  }\r\n  // bleEnable\r\n  data.bleEnable = (bytes[3] & 0x01) == 0 ? \"Disable\" : \"Enable\";\r\n  // blePositionReportInterval\r\n  data.blePositionReportInterval =\r\n    (((bytes[4] << 8) & 0xff00) | (bytes[5] & 0xff)) * 5 + \"s\";\r\n  // gnssPositionReportInterval\r\n  data.gnssPositionReportInterval =\r\n    (((bytes[6] << 8) & 0xff00) | (bytes[7] & 0xff)) * 5 + \"s\";\r\n  // heartbeatPeriod\r\n  data.heartbeatPeriod = (bytes[8] & 0xff) * 30 + \"s\";\r\n  // version\r\n  data.version =\r\n    (bytes[9] & 0xff).toString(16).toUpperCase() +\r\n    \".\" +\r\n    (bytes[10] & 0xff).toString(16).toUpperCase();\r\n  // cfmmsg\r\n  data.cfmmsg = \"1 Confirmed every \" + (bytes[11] & 0xff) + \" Heartbeat\";\r\n  // hbCount\r\n  data.hbCount = \"Disconnect Judgement \" + (bytes[12] & 0xff);\r\n  // fallDetectFeatureThreshold\r\n  data.fallDetectFeatureThreshold = (bytes[13] & 0xff) * 0.5 + \" meters\";\r\n\r\n  return data;\r\n}\r\n\r\n// type: 0x2 Heartbeat\r\nfunction decodeHeartbeat(bytes) {\r\n  var data = {};\r\n  // type\r\n  data.type = \"Heartbeat\";\r\n  // battery\r\n  data.battery = bytes[1] + \"%\";\r\n  // rssi\r\n  data.rssi = bytes[2] * -1 + \"dBm\";\r\n  // snr\r\n  data.snr = (((bytes[3] << 8) & 0xff00) | (bytes[4] & 0xff)) / 100 + \"dB\";\r\n  // bleReceivingNumber\r\n  data.bleReceivingNumber = bytes[5];\r\n  // gnssSearchingNumber\r\n  data.gnssSearchingNumber = bytes[6];\r\n  // chargeTime\r\n  data.chargeTime = bytes[7] * 30 + \"s\";\r\n  // wearTime\r\n  data.wearTime = bytes[8] * 30 + \"s\";\r\n  // moveState\r\n  data.moveState = (bytes[9] >> 4) & 0x0f;\r\n  // temperature\r\n  data.temperature = 0;\r\n\r\n  return data;\r\n}\r\n\r\n// type: 0x3 GNSSPosition\r\nfunction decodeGNSSPosition(bytes) {\r\n  var data = {};\r\n  // type\r\n  data.type = \"GNSSPosition\";\r\n  // gnssState\r\n  data.gnssState = ((bytes[0] >> 3) & 0x01) == 0 ? \"Success\" : \"Fail\";\r\n  // wearState\r\n  data.wearState = (bytes[0] & 0x01) == 0 ? \"Do not wear\" : \"Wear\";\r\n  // pressure\r\n  var pressure =\r\n    (bytes[1] << 24) | (bytes[2] << 16) | (bytes[3] << 8) | bytes[4];\r\n  data.pressure = pressure / 10 + \"pa\";\r\n  // longitude\r\n  var longitude =\r\n    (bytes[5] << 24) | (bytes[6] << 16) | (bytes[7] << 8) | bytes[8];\r\n  data.longitude = hex2float(longitude);\r\n  // latitude\r\n  var latitude =\r\n    (bytes[9] << 24) | (bytes[10] << 16) | (bytes[11] << 8) | bytes[12];\r\n  data.latitude = hex2float(latitude);\r\n  // time\r\n  var time =\r\n    (bytes[13] << 24) | (bytes[14] << 16) | (bytes[15] << 8) | bytes[16];\r\n  data.time = time;\r\n\r\n  return data;\r\n}\r\n\r\n// type: 0x5 UUIDReport\r\nfunction decodeUUIDReport(bytes) {\r\n  var data = {\r\n    type: \"UUIDReport\",\r\n    \r\n  };\r\n  data.number = Math.floor((bytes.length - 1) / 17);\r\n  \r\n  var beaconUUIDList = [];\r\n\r\n  for (var i = 0; i < data.number; i++) {\r\n    var beaconTypeIdVal = bytes[1 + 17 * i] & 0x03;\r\n    var beaconTypeId = \"\";\r\n\r\n    switch (beaconTypeIdVal) {\r\n      case 0x00:\r\n        return beaconTypeId = \"PositionBeaconUUID\";\r\n      case 0x01:\r\n        return beaconTypeId = \"AssetBeaconUUID\";\r\n      case 0x02:\r\n        return beaconTypeId = \"SpecialBeaconUUID\";\r\n      case 0x03:\r\n        return beaconTypeId = \"SearchBeaconUUID\";\r\n      default:\r\n        return null;\r\n    }\r\n\r\n    var beaconUUID = \"\";\r\n    for (var j = 0; j < 16; j++) {\r\n      var byteVal = parseBytesToInt(bytes, 2 + 17 * i + j, 1, true);\r\n      beaconUUID += padStart(intToHex(byteVal, true, false), 2, \"0\");\r\n    }\r\n\r\n    beaconUUIDList.push({ beaconTypeId, beaconUUID });\r\n  }\r\n\r\n  data.beaconUUIDList = beaconUUIDList;\r\n  return data;\r\n}\r\n\r\n// type: 0x7 Beacon\r\nfunction decodeBeacon(bytes) {\r\n  var data = {\r\n    type: \"Beacon\",\r\n  };\r\n  data.wearState = (bytes[0] & 0x01) === 0 ? \"Not wearing\" : \"Wearing\";\r\n  // pressure\r\n  var pressure = parseBytesToInt(bytes, 1, 4, true);\r\n  data.pressure = (pressure / 10) + \"pa\";\r\n\r\n  // number\r\n  data.number = bytes[5] & 0x0F;\r\n\r\n  for (var i = 0; i < data.number; i++) {\r\n    var index = 7 + 5 * i;\r\n\r\n    var major = intToHex(parseBytesToInt(bytes, index, 2, true), true, false);\r\n    var minor = intToHex(parseBytesToInt(bytes, index + 2, 2, true), true, false);\r\n    var rssi = parseBytesToInt(bytes, index + 4, 1, true) - 256 + \"dBm\";\r\n\r\n    data[\"beacon\" + (i + 1)] = padStart(major, 4, \"0\") + padStart(minor, 4, \"0\");\r\n    data[\"rssi\" + (i + 1)] = rssi;\r\n  }\r\n\r\n  return data;\r\n}\r\n\r\n// type: 0x8 Alarm\r\nfunction decodeAlarm(bytes) {\r\n  var data = {};\r\n  data.type = \"Alarm\";\r\n  var alarmValue = bytes[1] & 0xff;\r\n  if (alarmValue == 1) {\r\n    data.alarm = \"SOS\";\r\n  } else if (alarmValue == 2) {\r\n    data.alarm = \"Fall\";\r\n  } else if (alarmValue == 3) {\r\n    data.alarm = \"Special area\";\r\n  } else if (alarmValue == 4) {\r\n    data.alarm = \"Search\";\r\n  }\r\n  return data;\r\n}\r\n\r\nfunction hex2float(num) {\r\n  var sign = num & 0x80000000 ? -1 : 1;\r\n  var exponent = ((num >> 23) & 0xff) - 127;\r\n  var mantissa = 1 + (num & 0x7fffff) / 0x7fffff;\r\n  return sign * mantissa * Math.pow(2, exponent);\r\n}\r\n\r\n\r\n// TBEL\r\nvar deviceData = decodeToJson(payload);\r\nvar deviceName = deviceData.EUI;\r\nvar deviceType = \"deviceProfile\";\r\n\r\nvar result = {\r\n  deviceName: deviceName,\r\n  deviceType: deviceType,\r\n  telemetry: decodeUplink(hexToBytes(deviceData.data)),\r\n};\r\n\r\nfunction decodeToString(payload) {\r\n  return String.fromCharCode.apply(String, payload);\r\n}\r\n\r\nfunction decodeToJson(payload) {\r\n  var str = decodeToString(payload);\r\n  var data = JSON.parse(str);\r\n  return data;\r\n}\r\n\r\nreturn result;",
    "encoder": null,
    "tbelEncoder": null,
    "updateOnlyKeys": [
      "manufacturer"
    ]
  },
  "additionalInfo": {
    "description": ""
  },
  "edgeTemplate": false
}