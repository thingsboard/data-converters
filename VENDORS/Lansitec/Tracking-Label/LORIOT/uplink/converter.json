{
  "name": "Loriot Uplink Converter for Lansitec Tracking Label",
  "type": "UPLINK",
  "debugMode": false,
  "debugSettings": {
    "failuresEnabled": false,
    "allEnabled": false,
    "allEnabledUntil": 0
  },
  "configuration": {
    "scriptLang": "TBEL",
    "decoder": "// Decode an uplink message from a buffer\n// payload - array of bytes\n// metadata - key/value object\n\n/** Decoder **/\n\n// decode payload to string\nvar payloadStr = decodeToString(payload);\n\n// decode payload to JSON\n// var data = decodeToJson(payload);\n\nvar deviceName = 'Device A';\nvar deviceType = 'thermostat';\nvar customerName = 'Customer C';\nvar groupName = 'thermostat devices';\nvar manufacturer = 'Example corporation';\n// use assetName and assetType instead of deviceName and deviceType\n// to automatically create assets instead of devices.\n// var assetName = 'Asset A';\n// var assetType = 'building';\n\n// Result object with device/asset attributes/telemetry data\nvar result = {\n// Use deviceName and deviceType or assetName and assetType, but not both.\n   deviceName: deviceName,\n   deviceType: deviceType,\n// assetName: assetName,\n// assetType: assetType,\n// customerName: customerName,\n   groupName: groupName,\n   attributes: {\n       model: 'Model A',\n       serialNumber: 'SN111',\n       integrationName: metadata['integrationName'],\n       manufacturer: manufacturer\n   },\n   telemetry: {\n       temperature: 42,\n       humidity: 80,\n       rawData: payloadStr\n   }\n};\n\n/** Helper functions **/\n\nfunction decodeToString(payload) {\n   return String.fromCharCode.apply(String, payload);\n}\n\nfunction decodeToJson(payload) {\n   // covert payload to string.\n   var str = decodeToString(payload);\n\n   // parse string to JSON\n   var data = JSON.parse(str);\n   return data;\n}\n\nreturn result;",
    "tbelDecoder": "// decoder\r\nfunction decodeUplink(input) {\r\n  // type\r\n  var uplinkType = (input[0] >> 4) & 0x0f;\r\n\r\n  switch (uplinkType) {\r\n    case 0x01:\r\n      return decodeRegistration(input) ;\r\n\r\n    case 0x02:\r\n      return decodeHeartbeat(input) ;\r\n\r\n    case 0x03:\r\n      return decodeGNSSPosition(input) ;\r\n\r\n    case 0x07:\r\n      return decodeBeacon(input) ;\r\n\r\n    case 0x08:\r\n      return decodeAlarm(input) ;\r\n\r\n    default:\r\n      return null;\r\n  }\r\n}\r\n\r\n// type: 0x01 Registration\r\nfunction decodeRegistration(bytes) {\r\n  var data = {};\r\n  data.type = \"Registration\";\r\n  data.adr = ((bytes[0] >> 3) & 0x1) == 0 ? \"OFF\" : \"ON\";\r\n  data.power = ((bytes[2] >> 3) & 0x1f) + \"dBm\";\r\n  data.dr = (bytes[3] >> 4) & 0x0f;\r\n  data.gnssEnable = ((bytes[3] >> 3) & 0x01) == 0 ? \"Disable\" : \"Enable\";\r\n  var positionModeValue = (bytes[3] >> 1) & 0x03;\r\n  if (positionModeValue == 0) {\r\n    data.positionMode = \"Period\";\r\n  } else if (positionModeValue == 1) {\r\n    data.positionMode = \"Autonomous\";\r\n  } else if (positionModeValue == 2) {\r\n    data.positionMode = \"Demand\";\r\n  }\r\n  data.bleEnable = (bytes[3] & 0x01) == 0 ? \"Disable\" : \"Enable\";\r\n  data.blePositionReportInterval =\r\n    (((bytes[4] << 8) & 0xff00) | (bytes[5] & 0xff)) * 5 + \"s\";\r\n  data.gnssPositionReportInterval =\r\n    (((bytes[6] << 8) & 0xff00) | (bytes[7] & 0xff)) * 5 + \"s\";\r\n  data.heartbeatReportInterval = (bytes[8] & 0xff) * 30 + \"s\";\r\n  data.version =\r\n    (bytes[9] & 0xff).toString(16).toUpperCase() +\r\n    \".\" +\r\n    (bytes[10] & 0xff).toString(16).toUpperCase();\r\n  data.cfmsg = \"1 Confirmed every \" + (bytes[11] & 0xff) + \" Heartbeat\";\r\n  data.hbCount = \"Disconnect Judgement \" + (bytes[12] & 0xff);\r\n  data.fallDetection = (bytes[13] & 0xff) * 0.5 + \" meters\";\r\n  return data;\r\n}\r\n\r\n// type: 0x02 Heartbeat\r\nfunction decodeHeartbeat(bytes) {\r\n  var data = {};\r\n  data.type = \"Heartbeat\";\r\n  data.battery = bytes[1] + \"%\";\r\n  data.rssi = bytes[2] * -1 + \"dBm\";\r\n  data.snr = (((bytes[3] << 8) & 0xff00) | (bytes[4] & 0xff)) / 100 + \"dB\";\r\n  var gnssStateValue = (bytes[5] >> 4) & 0x0f;\r\n  if (gnssStateValue == 0) {\r\n    data.gnssState = \"Off\";\r\n  } else if (gnssStateValue == 1) {\r\n    data.gnssState = \"Boot GNSS\";\r\n  } else if (gnssStateValue == 2) {\r\n    data.gnssState = \"Locating\";\r\n  } else if (gnssStateValue == 3) {\r\n    data.gnssState = \"Located\";\r\n  } else if (gnssStateValue == 9) {\r\n    data.gnssState = \"No signal\";\r\n  }\r\n  data.moveState = bytes[5] & 0x0f;\r\n  var chargeStateValue = (bytes[6] >> 4) & 0x0f;\r\n  if (chargeStateValue == 0) {\r\n    data.chargeState = \"Power cable disconnected\";\r\n  } else if (chargeStateValue == 5) {\r\n    data.chargeState = \"Charging\";\r\n  } else if (chargeStateValue == 6) {\r\n    data.chargeState = \"Charge complete\";\r\n  }\r\n  return data;\r\n}\r\n\r\n// type: 0x03 GNSSPosition\r\nfunction decodeGNSSPosition(bytes) {\r\n  var data = {};\r\n  data.type = \"GNSSPosition\";\r\n  // longitude\r\n  var longitude =\r\n    (bytes[1] << 24) | (bytes[2] << 16) | (bytes[3] << 8) | bytes[4];\r\n  data.longitude = hex2float(longitude);\r\n\r\n  // latitude\r\n  var latitude =\r\n    (bytes[5] << 24) | (bytes[6] << 16) | (bytes[7] << 8) | bytes[8];\r\n  data.latitude = hex2float(latitude);\r\n\r\n  // time\r\n  var time =\r\n    (bytes[9] << 24) | (bytes[10] << 16) | (bytes[11] << 8) | bytes[12];\r\n  data.time = time;\r\n\r\n  return data;\r\n}\r\n\r\n// type: 0x07 Beacon\r\nfunction decodeBeacon(bytes) {\r\n  var data = {\r\n    type: \"Beacon\",\r\n    number: bytes[0] & 0x0F // 协议中低4位表示 Beacon 数量\r\n  };\r\n\r\n  for (var i = 0; i < data.number; i++) {\r\n    var index = 6 + 5 * i;\r\n    // 解析 Major\r\n    var major = intToHex(parseBytesToInt(bytes, index, 2, true), true, false);\r\n\r\n    // 解析 Minor\r\n    var minor = intToHex(parseBytesToInt(bytes, index + 2, 2, true), true, false);\r\n\r\n    // 解析 RSSI（有符号）\r\n    var rssi = parseBytesToInt(bytes, index + 4, 1, true) -256 + \"dBm\";\r\n    \r\n    // 动态字段名\r\n    data[\"beacon\" + (i + 1)] = padStart(major, 4, \"0\") + padStart(minor, 4, \"0\");\r\n    data[\"rssi\" + (i + 1)] = rssi;\r\n\r\n  }\r\n\r\n  return data;\r\n}\r\n\r\n// type: 0x08 Alarm\r\nfunction decodeAlarm(bytes) {\r\n  var data = {};\r\n  data.type = \"Alarm\";\r\n\r\n  var alarmValue = bytes[1] & 0xff;\r\n  if (alarmValue === 1) {\r\n    data.alarm = \"SOS\";\r\n  } else if (alarmValue === 2) {\r\n    data.alarm = \"Fall\";\r\n  } else {\r\n    data.alarm = \"Unknown\";\r\n  }\r\n\r\n  return data;\r\n}\r\n\r\nfunction hex2float(num) {\r\n  var sign = num & 0x80000000 ? -1 : 1;\r\n  var exponent = ((num >> 23) & 0xff) - 127;\r\n  var mantissa = 1 + (num & 0x7fffff) / 0x7fffff;\r\n  return sign * mantissa * Math.pow(2, exponent);\r\n}\r\n\r\n\r\n// TBEL\r\nvar deviceData = decodeToJson(payload);\r\nvar deviceName = deviceData.EUI;\r\nvar deviceType = \"deviceProfile\";\r\n\r\nvar result = {\r\n  deviceName: deviceName,\r\n  deviceType: deviceType,\r\n  telemetry: decodeUplink(hexToBytes(deviceData.data)),\r\n};\r\n\r\nfunction decodeToString(payload) {\r\n  return String.fromCharCode.apply(String, payload);\r\n}\r\n\r\nfunction decodeToJson(payload) {\r\n  var str = decodeToString(payload);\r\n  var data = JSON.parse(str);\r\n  return data;\r\n}\r\n\r\nreturn result;",
    "encoder": null,
    "tbelEncoder": null,
    "updateOnlyKeys": [
      "manufacturer"
    ]
  },
  "additionalInfo": {
    "description": ""
  },
  "edgeTemplate": false
}