{
  "name": "ChirpStack Uplink Converter for Lansitec UWB Anchor",
  "type": "UPLINK",
  "debugMode": false,
  "debugSettings": {
    "failuresEnabled": true,
    "allEnabled": false,
    "allEnabledUntil": 1745487067758
  },
  "configuration": {
    "scriptLang": "TBEL",
    "decoder": null,
    "tbelDecoder": "// UWB\r\nfunction decodeUplink(input) {\r\n  // type\r\n  var type = (input[0] >> 4) & 0x0f;\r\n\r\n  switch (type) {\r\n    case 0x01:\r\n      return decodeRegistration(input) ;\r\n\r\n    case 0x02:\r\n      return decodeHeartbeat(input) ;\r\n\r\n    case 0x03:\r\n      return decodeGNSSPosition(input) ;\r\n\r\n    case 0x04:\r\n      return decodeBeacon(input) ;\r\n\r\n    case 0x05:\r\n      return decodeAlarm(input) ;\r\n\r\n    case 0x06:\r\n      return decodeSingleConfigurationParameter(input) ;\r\n\r\n    case 0x07:\r\n      return decodeRuleBeacon(input) ;\r\n\r\n    case 0x08:\r\n      return decodeDistance(input) ;\r\n\r\n    default:\r\n      return;\r\n  }\r\n}\r\n\r\n// type: 0x1 Registration\r\nfunction decodeRegistration(bytes) {\r\n  var data = {};\r\n  data.type = \"RegistrationMessage\";\r\n  data.softwareVersion = ((bytes[1] << 8) & 0xff00) | (bytes[2] & 0xff);\r\n  data.hardwareVersion = ((bytes[3] << 8) & 0xff00) | (bytes[4] & 0xff);\r\n  data.deviceState =\r\n    (bytes[5] << 24) | (bytes[6] << 16) | (bytes[7] << 8) | bytes[8];\r\n  data.lorSynPeriod = bytes[9];\r\n  data.lorSynFreq =\r\n    (bytes[10] << 24) | (bytes[11] << 16) | (bytes[12] << 8) | bytes[13];\r\n  data.lorSynDr = bytes[14];\r\n  data.heartbeatPeriod = ((bytes[15] << 8) & 0xff00) | (bytes[16] & 0xff);\r\n  data.messageId = ((bytes[17] << 8) & 0xff00) | (bytes[18] & 0xff);\r\n  return data;\r\n}\r\n\r\n// type: 0x2 Heartbeat\r\nfunction decodeHeartbeat(bytes) {\r\n  var data = {};\r\n  data.type = \"HeartbeatMessage\";\r\n  data.deviceState = parseBytesToInt(bytes, 1, 4, true);\r\n  data.powerVol = bytes[5];\r\n  data.powerPersent = bytes[6];\r\n  data.uwbRangeCount = bytes[7];\r\n  data.bleOnCount = bytes[8];\r\n  data.gnssOnCount = bytes[9];\r\n  data.temperature = ((bytes[10] << 8) & 0xff00) | (bytes[11] & 0xff);\r\n  data.movementTime = ((bytes[12] << 8) & 0xff00) | (bytes[13] & 0xff);\r\n  data.wearTime = ((bytes[14] << 8) & 0xff00) | (bytes[15] & 0xff);\r\n  data.chargeTime = ((bytes[16] << 8) & 0xff00) | (bytes[17] & 0xff);\r\n  data.messageId = ((bytes[18] << 8) & 0xff00) | (bytes[19] & 0xff);\r\n  return data;\r\n}\r\n\r\n// type: 0x03 GNSSPosition\r\nfunction decodeGNSSPosition(bytes) {\r\n  var data = {};\r\n  data.type = \"GNSSPosition\";\r\n  data.gnssState =\r\n    (bytes[0] & 0x01) === 0 ? \"GNSS location success\" : \"GNSS location failed\";\r\n  // longitude\r\n  var longitude =\r\n    (bytes[1] << 24) | (bytes[2] << 16) | (bytes[3] << 8) | bytes[4];\r\n  data.longitude = hex2float(longitude);\r\n\r\n  // latitude\r\n  var latitude =\r\n    (bytes[5] << 24) | (bytes[6] << 16) | (bytes[7] << 8) | bytes[8];\r\n  data.latitude = hex2float(latitude);\r\n\r\n  // time\r\n  var time =\r\n    (bytes[9] << 24) | (bytes[10] << 16) | (bytes[11] << 8) | bytes[12];\r\n  data.time = time;\r\n  // wearState\r\n  data.wearState = bytes[13] === 0 ? \"no wear\" : \"wear\";\r\n\r\n  return data;\r\n}\r\n\r\n// type: 0x4 Beacon\r\nfunction decodeBeacon(bytes) {\r\n  var data = {\r\n    type: \"BeaconMessage\"\r\n  };\r\n\r\n  // 判断 Beacon 类型\r\n  data.beaconType = (bytes[0] & 0x01) === 0 ? \"PositioningBeacon\" : \"AssetBeacon\";\r\n\r\n  // Beacon 数量\r\n  data.beaconCount = bytes[1] & 0x0F;\r\n\r\n  for (var i = 0; i < data.beaconCount; i++) {\r\n    var index = 2 + 5 * i;\r\n\r\n    // 解析 Major\r\n    var major = intToHex(parseBytesToInt(bytes, index, 2, true), true, false);\r\n    major = padStart(major, 4, \"0\");\r\n\r\n    // 解析 Minor\r\n    var minor = intToHex(parseBytesToInt(bytes, index + 2, 2, true), true, false);\r\n    minor = padStart(minor, 4, \"0\");\r\n\r\n    // 解析 RSSI（有符号）\r\n    var rssi = (parseBytesToInt(bytes, index + 4, 1, true) - 256) + \"dBm\";\r\n\r\n    // 存储数据\r\n    data[\"beacon\" + (i + 1)] = major + minor;\r\n    data[\"rssi\" + (i + 1)] = rssi;\r\n  }\r\n\r\n  // 解析 wearState\r\n  var wearIndex = data.beaconCount * 5 + 2;\r\n  data.wearState = bytes[wearIndex] === 0 ? \"no wear\" : \"wear\";\r\n\r\n  return data;\r\n}\r\n\r\n\r\n// type: 0x5 Alarm\r\nfunction decodeAlarm(bytes) {\r\n  var data = {};\r\n  data.type = \"AlarmMessage\";\r\n  var alarmValue = bytes[1] & 0x0f;\r\n  if (alarmValue == 1) {\r\n    data.alarm = \"SOS\";\r\n  } else if (alarmValue == 2) {\r\n    data.alarm = \"Fall\";\r\n  } else if (alarmValue == 3) {\r\n    data.alarm = \"Special area\";\r\n  } else if (alarmValue == 4) {\r\n    data.alarm = \"Search\";\r\n  } else if (alarmValue == 5) {\r\n    data.alarm = \"Magnet remove\";\r\n  }\r\n  return data;\r\n}\r\n\r\n// type: 0x6 Single Configuration Parameter\r\nfunction decodeSingleConfigurationParameter(bytes) {\r\n  var data = {};\r\n  data.type = \"ConfigurationParameterResponse\";\r\n  var parameter = [];\r\n  var byteLength = bytes.length;\r\n  var index = 0;\r\n  while (index + 1 < byteLength) {\r\n    var commandBitField = {};\r\n    var parameterType = bytes[index + 1] & 0xff;\r\n    commandBitField.parameterType = parameterType;\r\n    var commandBitFieldLength = getCommandBitFieldLength(parameterType);\r\n    var parameterValue = getParameterValue(bytes, index, commandBitFieldLength);\r\n    commandBitField.parameterValue = parameterValue;\r\n    commandBitField.name = getParameterName(parameterType);\r\n    commandBitField.parameterDefinition = getParameterDefinition(\r\n      parameterType,\r\n      parameterValue\r\n    );\r\n    index = index + commandBitFieldLength;\r\n    parameter.push(commandBitField);\r\n  }\r\n  data.parameter = parameter;\r\n  return data;\r\n}\r\n\r\n// type: 0x7 Rule Beacon\r\nfunction decodeRuleBeacon(bytes) {\r\n  var data = {\r\n    type: \"RuleBeaconMessage\"\r\n  };\r\n\r\n  // 解析 deviceTypeId\r\n  var deviceTypeId = bytes[0] & 0x03;\r\n  if (deviceTypeId === 1) {\r\n    data.deviceTypeId = \"deviceTypeId1\";\r\n  } else if (deviceTypeId === 2) {\r\n    data.deviceTypeId = \"deviceTypeId2\";\r\n  } else if (deviceTypeId === 3) {\r\n    data.deviceTypeId = \"deviceTypeId3\";\r\n  }\r\n\r\n  // Beacon 数量\r\n  data.beaconCount = bytes[1] & 0x0F;\r\n\r\n  for (var i = 0; i < data.beaconCount; i++) {\r\n    var index = 2 + 5 * i;\r\n\r\n    // 解析 Major\r\n    var major = intToHex(parseBytesToInt(bytes, index, 2, true), true, false);\r\n    major = padStart(major, 4, \"0\");\r\n\r\n    // 解析 Minor\r\n    var minor = intToHex(parseBytesToInt(bytes, index + 2, 2, true), true, false);\r\n    minor = padStart(minor, 4, \"0\");\r\n\r\n    // 解析 RSSI（有符号）\r\n    var rssi = (parseBytesToInt(bytes, index + 4, 1, true) - 256) + \"dBm\";\r\n\r\n    // 存储数据\r\n    data[\"beacon\" + (i + 1)] = major + minor;\r\n    data[\"rssi\" + (i + 1)] = rssi;\r\n  }\r\n\r\n  // 解析 wearState\r\n  var wearIndex = data.beaconCount * 5 + 2;\r\n  data.wearState = bytes[wearIndex] === 0 ? \"no wear\" : \"wear\";\r\n\r\n  return data;\r\n}\r\n\r\n\r\n// type: 0x8 Distance\r\nfunction decodeDistance(bytes) {\r\n  var data = {\r\n    type: \"Distance\"\r\n  };\r\n\r\n  data.uwbBeaconCount = bytes[1] & 0x0F;\r\n\r\n  for (var i = 0; i < data.uwbBeaconCount; i++) {\r\n    var index = 2 + 7 * i;\r\n\r\n    // 解析 dev\r\n    var dev = intToHex(parseBytesToInt(bytes, index, 2, true), true, false);\r\n    dev = padStart(dev, 4, \"0\");\r\n\r\n    // 解析 eui\r\n    var eui = intToHex(parseBytesToInt(bytes, index + 2, 2, true), true, false);\r\n    eui = padStart(eui, 4, \"0\");\r\n\r\n    // 解析 distance（3字节）\r\n    var distance = parseBytesToInt(bytes, index + 4, 3, true);\r\n\r\n    // 存储\r\n    data[\"majorminor\" + (i + 1)] = dev + eui;\r\n    data[\"distance\" + (i + 1)] = distance;\r\n  }\r\n\r\n  // 解析 wearState\r\n  var wearIndex = data.uwbBeaconCount * 7 + 2;\r\n  data.wearState = bytes[wearIndex] === 0 ? \"no wear\" : \"wear\";\r\n\r\n  return data;\r\n}\r\n\r\n\r\n// getParameterValue hexString\r\nfunction getParameterValue(bytes, index, length) {\r\n  var hexString = \"\";\r\n  for (var i = 2; i <= length; i++) {\r\n    var hex = (bytes[index + i] & 0xff).toString(16).toUpperCase();\r\n    hexString += hex.padStart(2, \"0\");\r\n  }\r\n  return hexString;\r\n}\r\n\r\n// getCommandBitFieldLength\r\nfunction getCommandBitFieldLength(parameterType) {\r\n  var lengths = {\r\n    0x00: 3,\r\n    0x01: 3,\r\n    0x02: 3,\r\n    0x03: 3,\r\n    0x04: 3,\r\n    0x05: 2,\r\n    0x06: 2,\r\n    0x07: 2,\r\n    0x08: 2,\r\n    0x0a: 17,\r\n    0x0b: 17,\r\n    0x0e: 9,\r\n    0x1e: 2,\r\n    0x1f: 2,\r\n    0x20: 2,\r\n    0x29: 2,\r\n    0x2a: 2,\r\n    0x2b: 2,\r\n    0x2e: 2,\r\n    0x2f: 2,\r\n    0x30: 2,\r\n    0x31: 2,\r\n  };\r\n  return lengths[parameterType] ?? 0;\r\n}\r\n\r\n// Parameter Name\r\nfunction getParameterName(parameterType) {\r\n  var name = {\r\n    0x00: \"SoftwareVersion\",\r\n    0x01: \"HBPeriod\",\r\n    0x02: \"BlePositionReportInterval\",\r\n    0x03: \"GNSSPositionReportInterval\",\r\n    0x04: \"AssetBeaconReportInterval\",\r\n    0x05: \"BlePositionReceivingDuration\",\r\n    0x06: \"GNSSPositionReceivingDuration\",\r\n    0x07: \"AssetBleReceivingDuration\",\r\n    0x08: \"FallThreshold\",\r\n    0x0a: \"PosBeaconUUID\",\r\n    0x0b: \"AssetBeaconUUID\",\r\n    0x0e: \"ISMI\",\r\n    0x1e: \"FallDetectionAlarmEnable\",\r\n    0x1f: \"SOSAlarmEnable\",\r\n    0x20: \"PosMode\",\r\n    0x29: \"AssetManagementEnable\",\r\n    0x2a: \"GNSSFailureReportEnable\",\r\n    0x2b: \"AssetBeaconSortEnable\",\r\n    0x2e: \"PowerSwitchEnable\",\r\n    0x2f: \"NetworkStatusCheck\",\r\n    0x30: \"GNSSEnableState\",\r\n    0x31: \"BleEnable\",\r\n  };\r\n  return name[parameterType] ?? \"No matching parameter names\";\r\n}\r\n\r\n// Parameter Definition\r\nfunction getParameterDefinition(parameterType, parameterValue) {\r\n  var val = parseInt(parameterValue, 16);\r\n  var name = {\r\n    0x00: \"SoftwareVersion\",\r\n    0x01: val * 30 + \"s, The interval of the heartbeat message, unit: 30s\",\r\n    0x02: val * 5 + \"s, The interval of Bluetooth position repor, unit: 5s\",\r\n    0x03: val * 5 + \"s, The interval of GNSS position report, unit: 5s\",\r\n    0x04: val * 5 + \"s, The interval of asset beacons report, unit: 5s\",\r\n    0x05:\r\n      val * 1 + \"s, The duration of BLE position beacon receiving, unit: 1s\",\r\n    0x06: val * 5 + \"s, The duration of GNSS position receiving, unit: 5s\",\r\n    0x07: val * 1 + \"s, The duration of asset beacon receiving, unit 1s\",\r\n    0x08:\r\n      val / 2 +\r\n      \"s, The threshold of the fall detection, the unit is 0.5 meters\",\r\n    0x0a: \"PosBeaconUUIDFilter\",\r\n    0x0b: \"AssetBeaconUUIDFilter\",\r\n    0x0e: \"ISMI\",\r\n    0x1e: val == 0 ? \"Disable\" : \"Enable\",\r\n    0x1f: val == 0 ? \"Disable\" : \"Enable\",\r\n    0x20:\r\n      val == 0\r\n        ? \"Period Mode\"\r\n        : val == 1\r\n        ? \" Autonomous Mode\"\r\n        : \"On-demand Mode\",\r\n    0x29: val == 0 ? \"Disable\" : \"Enable\",\r\n    0x2a: val == 0 ? \"Disable\" : \"Enable\",\r\n    0x2b: val == 0 ? \"Disable\" : \"Enable\",\r\n    0x2e: val == 0 ? \"Disable\" : \"Enable\",\r\n    0x2f: val == 0 ? \"Disable\" : \"Enable\",\r\n    0x30: val == 0 ? \"Disable\" : \"Enable\",\r\n    0x31: val == 0 ? \"Disable\" : \"Enable\",\r\n  };\r\n  return name[parameterType] ?? \"No matching parameter names\";\r\n}\r\n\r\n// Floating point conversion\r\nfunction hex2float(num) {\r\n  var sign = num & 0x80000000 ? -1 : 1;\r\n  var exponent = ((num >> 23) & 0xff) - 127;\r\n  var mantissa = 1 + (num & 0x7fffff) / 0x7fffff;\r\n  return sign * mantissa * Math.pow(2, exponent);\r\n}\r\n\r\n\r\n// TBEL\r\nvar deviceData = decodeToJson(payload);\r\nvar deviceName = deviceData.deviceInfo.deviceName;\r\nvar deviceType = deviceData.deviceInfo.deviceProfileName;\r\n\r\nvar result = {\r\n  deviceName: deviceName,\r\n  deviceType: deviceType,\r\n  telemetry: decodeUplink(base64ToBytes(deviceData.data)),\r\n};\r\n\r\nfunction decodeToString(payload) {\r\n  return String.fromCharCode.apply(String, payload);\r\n}\r\n\r\nfunction decodeToJson(payload) {\r\n  var str = decodeToString(payload);\r\n  var data = JSON.parse(str);\r\n  return data;\r\n}\r\n\r\nreturn result;",
    "encoder": null,
    "tbelEncoder": null,
    "updateOnlyKeys": [
      "tenantId",
      "tenantName",
      "applicationId",
      "applicationName",
      "deviceProfileId",
      "deviceProfileName",
      "devEui",
      "devAddr",
      "fPort",
      "frequency",
      "bandwidth",
      "spreadingFactor",
      "codeRate",
      "battery",
      "pir",
      "daylight",
      "confirmed",
      "gatewayId",
      "channel",
      "rfChain",
      "crcStatus"
    ]
  },
  "additionalInfo": {
    "description": ""
  },
  "edgeTemplate": false
}